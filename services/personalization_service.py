"""Personalization service for adaptive user experience."""

from __future__ import annotations

from typing import Optional, Dict, Any
from datetime import datetime, timedelta

from core import get_logger
from database.connection import get_db_pool

logger = get_logger(__name__)


class PersonalizationService:
    """Service for personalizing user experience."""
    
    @staticmethod
    async def get_user_profile(user_id: int) -> Optional[Dict[str, Any]]:
        """Get user profile data for personalization.
        
        Args:
            user_id: Telegram user ID
            
        Returns:
            User profile dictionary or None
        """
        try:
            pool = get_db_pool()
            async with pool.connection() as conn:
                # Get participant data
                cursor = await conn.execute(
                    """
                    SELECT full_name, username, created_at, status
                    FROM participants
                    WHERE telegram_id = ?
                    """,
                    (user_id,)
                )
                participant_row = await cursor.fetchone()
                
                if not participant_row:
                    return None
                
                full_name, username, created_at, status = participant_row
                
                # Get activity stats
                cursor = await conn.execute(
                    """
                    SELECT 
                        COUNT(*) as event_count,
                        MAX(timestamp) as last_active
                    FROM analytics_events
                    WHERE user_id = ?
                    """,
                    (user_id,)
                )
                activity_row = await cursor.fetchone()
                event_count, last_active = activity_row if activity_row else (0, None)
                
                # Get support tickets count
                cursor = await conn.execute(
                    """
                    SELECT COUNT(*)
                    FROM support_tickets t
                    JOIN participants p ON p.id = t.participant_id
                    WHERE p.telegram_id = ?
                    """,
                    (user_id,)
                )
                tickets_row = await cursor.fetchone()
                tickets_count = tickets_row[0] if tickets_row else 0
                
                return {
                    "full_name": full_name,
                    "first_name": full_name.split()[0] if full_name else username or "–£—á–∞—Å—Ç–Ω–∏–∫",
                    "username": username,
                    "created_at": created_at,
                    "status": status,
                    "event_count": event_count,
                    "last_active": last_active,
                    "tickets_count": tickets_count,
                }
        except Exception as e:
            logger.error(
                f"Failed to get user profile: {e}",
                exc_info=True,
                extra={"user_id": user_id}
            )
            return None
    
    @staticmethod
    async def get_personalized_greeting(user_id: int) -> str:
        """Get personalized greeting for user.
        
        Args:
            user_id: Telegram user ID
            
        Returns:
            Personalized greeting message
        """
        profile = await PersonalizationService.get_user_profile(user_id)
        
        if not profile:
            return "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"
        
        first_name = profile["first_name"]
        
        # Check if returning user
        if profile["last_active"]:
            try:
                last_active = datetime.fromisoformat(profile["last_active"].replace('Z', '+00:00'))
                if datetime.now() - last_active > timedelta(days=7):
                    return f"üëã –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞, {first_name}!"
                elif datetime.now() - last_active > timedelta(days=1):
                    return f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!"
            except (ValueError, AttributeError):
                pass
        
        return f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!"
    
    @staticmethod
    async def get_personalized_status_message(
        user_id: int,
        status: str
    ) -> str:
        """Get personalized status message.
        
        Args:
            user_id: Telegram user ID
            status: User status
            
        Returns:
            Personalized status message
        """
        profile = await PersonalizationService.get_user_profile(user_id)
        first_name = profile["first_name"] if profile else "–£—á–∞—Å—Ç–Ω–∏–∫"
        
        status_messages = {
            "approved": (
                f"üéâ {first_name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n"
                f"‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤\n"
                f"üé≤ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏\n"
                f"üçÄ –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏!"
            ),
            "pending": (
                f"‚è≥ {first_name}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n\n"
                f"üìù –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç –¥–∞–Ω–Ω—ã–µ\n"
                f"‚è±Ô∏è –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤\n"
                f"üîî –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
            ),
            "rejected": (
                f"‚ùå {first_name}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n"
                f"üí° –í—ã –º–æ–∂–µ—Ç–µ:\n"
                f"‚Ä¢ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n"
                f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π"
            ),
        }
        
        return status_messages.get(
            status,
            f"{first_name}, –≤–∞—à —Å—Ç–∞—Ç—É—Å: {status}"
        )
    
    @staticmethod
    async def get_contextual_help(
        user_id: int,
        context: str
    ) -> str:
        """Get contextual help based on user history.
        
        Args:
            user_id: Telegram user ID
            context: Current context (registration, support, etc.)
            
        Returns:
            Contextual help message
        """
        profile = await PersonalizationService.get_user_profile(user_id)
        
        if not profile:
            return "üí° –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
        
        first_name = profile["first_name"]
        
        # Registration context
        if context == "registration":
            if profile["event_count"] == 0:
                # First time user
                return (
                    f"üìù {first_name}, —ç—Ç–æ –≤–∞—à–∞ –ø–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n\n"
                    f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö\n"
                    f"üìû –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /support"
                )
            else:
                # Returning user
                return (
                    f"üîÑ {first_name}, —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!\n\n"
                    f"üí° –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ"
                )
        
        # Support context
        elif context == "support":
            if profile["tickets_count"] == 0:
                return (
                    f"üí¨ {first_name}, –º—ã —Ä–∞–¥—ã –ø–æ–º–æ—á—å!\n\n"
                    f"üí° –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ\n"
                    f"üìé –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ"
                )
            else:
                return (
                    f"üí¨ {first_name}, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ\n\n"
                    f"üìã –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å {profile['tickets_count']} –æ–±—Ä–∞—â–µ–Ω–∏–π\n"
                    f"üí° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö: /support ‚Üí –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è"
                )
        
        return f"üí° {first_name}, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    
    @staticmethod
    async def get_adaptive_message(
        user_id: int,
        message_type: str,
        **kwargs
    ) -> str:
        """Get adaptive message based on user behavior.
        
        Args:
            user_id: Telegram user ID
            message_type: Type of message
            **kwargs: Additional parameters
            
        Returns:
            Adaptive message
        """
        profile = await PersonalizationService.get_user_profile(user_id)
        
        if not profile:
            # Default non-personalized messages
            default_messages = {
                "welcome": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                "error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                "success": "‚úÖ –£—Å–ø–µ—à–Ω–æ!",
            }
            return default_messages.get(message_type, "")
        
        first_name = profile["first_name"]
        
        # Adaptive messages based on user activity
        if message_type == "welcome":
            if profile["event_count"] > 50:
                return f"üëã {first_name}, —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞!"
            elif profile["event_count"] > 10:
                return f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {first_name}!"
            else:
                return f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!"
        
        elif message_type == "error":
            if kwargs.get("retry_count", 0) > 2:
                return (
                    f"‚ùå {first_name}, –ø–æ—Ö–æ–∂–µ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ\n"
                    f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support"
                )
            else:
                return f"‚ùå {first_name}, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        
        elif message_type == "success":
            return f"‚úÖ {first_name}, –æ—Ç–ª–∏—á–Ω–æ! –í—Å–µ –≥–æ—Ç–æ–≤–æ"
        
        return ""


# Singleton instance
_personalization_service: Optional[PersonalizationService] = None


def get_personalization_service() -> PersonalizationService:
    """Get personalization service instance.
    
    Returns:
        Personalization service instance
    """
    global _personalization_service
    if _personalization_service is None:
        _personalization_service = PersonalizationService()
    return _personalization_service

