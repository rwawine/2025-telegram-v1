"""–°–∏—Å—Ç–µ–º–∞ —É–º–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

from typing import Dict, List, Optional, Tuple
from datetime import datetime, time, timedelta
from dataclasses import dataclass
from enum import Enum
import random
from database.connection import get_db_pool


class NotificationPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    URGENT = "urgent"


class NotificationType(Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    STATUS_UPDATE = "status_update"
    LOTTERY_RESULT = "lottery_result"
    REMINDER = "reminder"
    SUPPORT_RESPONSE = "support_response"
    SYSTEM = "system"
    PROMOTIONAL = "promotional"


@dataclass
class NotificationTemplate:
    """–®–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏."""
    type: NotificationType
    variants: List[str]
    priority: NotificationPriority
    best_time_start: time
    best_time_end: time


class SmartNotificationService:
    """–°–µ—Ä–≤–∏—Å —É–º–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    
    # –®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    TEMPLATES = {
        NotificationType.STATUS_UPDATE: NotificationTemplate(
            type=NotificationType.STATUS_UPDATE,
            variants=[
                "üéâ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, {name}! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!",
                "‚úÖ {name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é!",
                "üåü {name}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞!",
            ],
            priority=NotificationPriority.HIGH,
            best_time_start=time(9, 0),
            best_time_end=time(21, 0)
        ),
        NotificationType.LOTTERY_RESULT: NotificationTemplate(
            type=NotificationType.LOTTERY_RESULT,
            variants=[
                "üéä {name}, —É –Ω–∞—Å –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! –í—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—å!",
                "üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {name}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!",
                "‚ú® {name}, —ç—Ç–æ –≤–∞—à —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –¥–µ–Ω—å - –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏!",
            ],
            priority=NotificationPriority.URGENT,
            best_time_start=time(10, 0),
            best_time_end=time(20, 0)
        ),
        NotificationType.REMINDER: NotificationTemplate(
            type=NotificationType.REMINDER,
            variants=[
                "‚è∞ {name}, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º: {reminder_text}",
                "üîî {name}, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ: {reminder_text}",
                "üí° {name}, –¥—Ä—É–∂–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}",
            ],
            priority=NotificationPriority.MEDIUM,
            best_time_start=time(10, 0),
            best_time_end=time(19, 0)
        ),
        NotificationType.SUPPORT_RESPONSE: NotificationTemplate(
            type=NotificationType.SUPPORT_RESPONSE,
            variants=[
                "üí¨ {name}, –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –ø–æ–ª—É—á–∏–ª–æ –æ—Ç–≤–µ—Ç!",
                "üì® {name}, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!",
                "‚úâÔ∏è {name}, –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket_id}!",
            ],
            priority=NotificationPriority.HIGH,
            best_time_start=time(8, 0),
            best_time_end=time(22, 0)
        ),
    }
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        # –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user_id: [(type, timestamp), ...]}
        self.notification_history: Dict[int, List[Tuple[NotificationType, datetime]]] = {}
        
        # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_id: preferences}
        self.user_preferences: Dict[int, Dict] = {}
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã A/B —Ç–µ—Å—Ç–æ–≤: {variant: {sent, opened, clicked}}
        self.ab_test_results: Dict[str, Dict] = {}
    
    async def send_notification(
        self,
        user_id: int,
        notification_type: NotificationType,
        params: Dict = None,
        priority: Optional[NotificationPriority] = None,
        force_send: bool = False
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–º–Ω–æ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–µ—Å–ª–∏ None - –±–µ—Ä–µ—Ç—Å—è –∏–∑ —à–∞–±–ª–æ–Ω–∞)
            force_send: –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ —á–∞—Å—Ç–æ—Ç—ã
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        if params is None:
            params = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await self._get_user_info(user_id)
        if not user_info:
            return False
        
        params['name'] = user_info.get('name', '–£—á–∞—Å—Ç–Ω–∏–∫')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if not force_send:
            if not await self._can_send_notification(user_id, notification_type):
                return False
            
            if not self._is_good_time_to_send(notification_type):
                # –û—Ç–ª–æ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è
                await self._schedule_notification(user_id, notification_type, params)
                return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–∞ (A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
        template = self.TEMPLATES.get(notification_type)
        if not template:
            return False
        
        variant_text = self._select_best_variant(template.variants, user_id)
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        message = await self._personalize_message(variant_text, user_id, params)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = await self._send_telegram_message(user_id, message)
        
        if success:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            await self._record_notification(user_id, notification_type, variant_text)
        
        return success
    
    async def _get_user_info(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        pool = get_db_pool()
        
        async with pool.connection() as conn:
            cursor = await conn.execute(
                "SELECT telegram_id, full_name FROM participants WHERE telegram_id = ?",
                (user_id,)
            )
            row = await cursor.fetchone()
            
            if row:
                return {
                    'telegram_id': row[0],
                    'name': row[1].split()[0] if row[1] else '–£—á–∞—Å—Ç–Ω–∏–∫'  # –¢–æ–ª—å–∫–æ –∏–º—è
                }
            return None
    
    async def _can_send_notification(
        self,
        user_id: int,
        notification_type: NotificationType
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        –£—á–∏—Ç—ã–≤–∞–µ—Ç:
        - –ß–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ—Ö–æ–∂–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        - –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        prefs = self.user_preferences.get(user_id, {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        if prefs.get(f'disable_{notification_type.value}', False):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É (–Ω–µ –±–æ–ª–µ–µ N —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —á–∞—Å)
        max_per_hour = prefs.get('max_notifications_per_hour', 5)
        recent_count = await self._count_recent_notifications(user_id, hours=1)
        
        if recent_count >= max_per_hour:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —Ç–∞–∫–æ–µ –∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ
        last_same_type = await self._get_last_notification_time(user_id, notification_type)
        if last_same_type:
            min_interval = timedelta(minutes=prefs.get('min_interval_minutes', 30))
            if datetime.now() - last_same_type < min_interval:
                return False
        
        return True
    
    def _is_good_time_to_send(self, notification_type: NotificationType) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ö–æ—Ä–æ—à–µ–µ –ª–∏ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        
        –ò–∑–±–µ–≥–∞–µ—Ç –Ω–æ—á–Ω—ã—Ö —á–∞—Å–æ–≤ –∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞.
        """
        current_time = datetime.now().time()
        
        # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ—á—å—é (00:00 - 07:00)
        if time(0, 0) <= current_time < time(7, 0):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        template = self.TEMPLATES.get(notification_type)
        if template:
            if not (template.best_time_start <= current_time <= template.best_time_end):
                return False
        
        return True
    
    def _select_best_variant(self, variants: List[str], user_id: int) -> str:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç epsilon-greedy –∞–ª–≥–æ—Ä–∏—Ç–º:
        - 80% –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        - 20% –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π (–¥–ª—è exploration)
        """
        if random.random() < 0.2:  # Exploration
            return random.choice(variants)
        
        # Exploitation - –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        best_variant = variants[0]
        best_score = 0.0
        
        for variant in variants:
            results = self.ab_test_results.get(variant, {'sent': 0, 'opened': 0})
            if results['sent'] > 0:
                score = results['opened'] / results['sent']
                if score > best_score:
                    best_score = score
                    best_variant = variant
        
        return best_variant
    
    async def _personalize_message(
        self,
        template: str,
        user_id: int,
        params: Dict
    ) -> str:
        """
        –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        –î–æ–±–∞–≤–ª—è–µ—Ç:
        - –û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
        - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –∏ —Ç.–¥.)
        - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—Ä–∏–∏
        """
        # –ë–∞–∑–æ–≤–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        message = template.format(**params)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_history = await self._get_user_history(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
        if user_history.get('participation_count', 0) > 1:
            message += f"\n\nüåü –í—ã —Å –Ω–∞–º–∏ —É–∂–µ {user_history['participation_count']} —Ä–∞–∑!"
        
        if user_history.get('is_loyal'):
            message += "\nüíé –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ª–æ—è–ª—å–Ω–æ—Å—Ç—å!"
        
        return message
    
    async def _get_user_history(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        pool = get_db_pool()
        
        async with pool.connection() as conn:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∏–π
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM participants WHERE telegram_id = ?",
                (user_id,)
            )
            row = await cursor.fetchone()
            participation_count = row[0] if row else 0
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
            cursor = await conn.execute(
                """
                SELECT COUNT(*) FROM winners w
                JOIN participants p ON w.participant_id = p.id
                WHERE p.telegram_id = ?
                """,
                (user_id,)
            )
            row = await cursor.fetchone()
            wins_count = row[0] if row else 0
            
            return {
                'participation_count': participation_count,
                'wins_count': wins_count,
                'is_loyal': participation_count >= 3,
                'is_winner': wins_count > 0
            }
    
    async def _send_telegram_message(self, user_id: int, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.
        
        TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º bot instance
        """
        # –ó–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å bot instance
        print(f"[NOTIFICATION] To user {user_id}: {message}")
        return True
    
    async def _record_notification(
        self,
        user_id: int,
        notification_type: NotificationType,
        variant_text: str
    ) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if user_id not in self.notification_history:
            self.notification_history[user_id] = []
        
        self.notification_history[user_id].append((notification_type, datetime.now()))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É A/B —Ç–µ—Å—Ç–∞
        if variant_text not in self.ab_test_results:
            self.ab_test_results[variant_text] = {'sent': 0, 'opened': 0, 'clicked': 0}
        
        self.ab_test_results[variant_text]['sent'] += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        pool = get_db_pool()
        async with pool.connection() as conn:
            await conn.execute(
                """
                INSERT INTO notification_log (user_id, type, variant, sent_at)
                VALUES (?, ?, ?, ?)
                """,
                (user_id, notification_type.value, variant_text, datetime.now())
            )
            await conn.commit()
    
    async def _count_recent_notifications(self, user_id: int, hours: int = 1) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤."""
        if user_id not in self.notification_history:
            return 0
        
        cutoff = datetime.now() - timedelta(hours=hours)
        return sum(1 for _, timestamp in self.notification_history[user_id] if timestamp > cutoff)
    
    async def _get_last_notification_time(
        self,
        user_id: int,
        notification_type: NotificationType
    ) -> Optional[datetime]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞."""
        if user_id not in self.notification_history:
            return None
        
        for ntype, timestamp in reversed(self.notification_history[user_id]):
            if ntype == notification_type:
                return timestamp
        
        return None
    
    async def _schedule_notification(
        self,
        user_id: int,
        notification_type: NotificationType,
        params: Dict
    ) -> None:
        """–û—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è."""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        pass
    
    async def set_user_preferences(
        self,
        user_id: int,
        preferences: Dict
    ) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            preferences: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:
                - max_notifications_per_hour: int
                - min_interval_minutes: int
                - disable_promotional: bool
                - quiet_hours_start: time
                - quiet_hours_end: time
        """
        self.user_preferences[user_id] = preferences
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        pool = get_db_pool()
        async with pool.connection() as conn:
            await conn.execute(
                """
                INSERT OR REPLACE INTO notification_preferences (user_id, preferences)
                VALUES (?, ?)
                """,
                (user_id, str(preferences))
            )
            await conn.commit()
    
    async def group_similar_notifications(
        self,
        user_id: int,
        notifications: List[Dict]
    ) -> List[Dict]:
        """
        –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ—Ö–æ–∂–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
        
        –ù–∞–ø—Ä–∏–º–µ—Ä: "–£ –≤–∞—Å 3 –Ω–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"
        –≤–º–µ—Å—Ç–æ —Ç—Ä–µ—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        """
        grouped = {}
        
        for notif in notifications:
            ntype = notif['type']
            if ntype not in grouped:
                grouped[ntype] = []
            grouped[ntype].append(notif)
        
        result = []
        for ntype, group in grouped.items():
            if len(group) > 1:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º
                result.append({
                    'type': ntype,
                    'count': len(group),
                    'grouped': True,
                    'items': group
                })
            else:
                result.extend(group)
        
        return result
    
    async def get_ab_test_results(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        return dict(self.ab_test_results)
    
    async def track_notification_opened(self, user_id: int, variant_text: str) -> None:
        """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
        if variant_text in self.ab_test_results:
            self.ab_test_results[variant_text]['opened'] += 1
    
    async def track_notification_clicked(self, user_id: int, variant_text: str) -> None:
        """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–Ω—É–ª –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é."""
        if variant_text in self.ab_test_results:
            self.ab_test_results[variant_text]['clicked'] += 1


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
smart_notification_service = SmartNotificationService()

