#!/usr/bin/env python3
"""Comprehensive tests for bot message format handling."""

import asyncio
import logging
import sys
import os
from datetime import datetime
from unittest.mock import AsyncMock, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class MockMessage:
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram."""
    
    def __init__(self, content_type="text", text=None, **kwargs):
        self.message_id = 12345
        self.date = datetime.now()
        self.content_type = content_type
        self.text = text
        self.from_user = MagicMock()
        self.from_user.id = 123456789
        self.from_user.first_name = "Test"
        self.from_user.last_name = "User"
        self.from_user.username = "testuser"
        self.chat = MagicMock()
        self.chat.id = 123456789
        self.chat.type = "private"
        self.bot = AsyncMock()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        for key, value in kwargs.items():
            setattr(self, key, value)
        
        # Mock –º–µ—Ç–æ–¥–æ–≤
        self.answer = AsyncMock()
        self.reply = AsyncMock()


class MockCallbackQuery:
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ callback query."""
    
    def __init__(self, data="test_callback", **kwargs):
        self.id = "callback_123"
        self.data = data
        self.from_user = MagicMock()
        self.from_user.id = 123456789
        self.from_user.first_name = "Test"
        self.from_user.last_name = "User"
        self.message = MockMessage()
        self.bot = AsyncMock()
        
        for key, value in kwargs.items():
            setattr(self, key, value)
        
        self.answer = AsyncMock()
        self.edit_message_text = AsyncMock()


async def test_text_messages():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    print("üìù Testing text message handling...")
    
    test_cases = [
        {"text": "–ü—Ä–∏–≤–µ—Ç!", "description": "Simple greeting"},
        {"text": "/start", "description": "Start command"},
        {"text": "üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "description": "Registration button"},
        {"text": "‚úÖ –ú–æ–π —Å—Ç–∞—Ç—É—Å", "description": "Status button"},
        {"text": "üí¨ –ü–æ–º–æ—â—å", "description": "Help button"},
        {"text": "üìä –û —Ä–æ–∑—ã–≥—Ä—ã—à–µ", "description": "Info button"},
        {"text": "üòÄüòÉüòÑüòÅ", "description": "Only emojis"},
        {"text": "–¢–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ üéâüéä", "description": "Text with emojis"},
        {"text": "123456789", "description": "Numbers only"},
        {"text": "special chars !@#$%^&*()", "description": "Special characters"},
        {"text": "Very long text " * 50, "description": "Very long message"},
        {"text": "", "description": "Empty text"},
        {"text": None, "description": "No text"},
    ]
    
    try:
        from bot.handlers.common import CommonHandlers
        from bot.handlers.fallback import SmartFallbackHandler
        
        common_handler = CommonHandlers()
        fallback_handler = SmartFallbackHandler()
        
        for case in test_cases:
            try:
                message = MockMessage(
                    content_type="text",
                    text=case["text"]
                )
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                print(f"  Testing: {case['description']}")
                
                # –¢–µ—Å—Ç –Ω–∞ start –∫–æ–º–∞–Ω–¥—É
                if case["text"] and "/start" in case["text"]:
                    await common_handler.start(message)
                    print(f"    ‚úÖ Start handler processed")
                
                # –¢–µ—Å—Ç –Ω–∞ –ø–æ–º–æ—â—å
                elif case["text"] and any(help_text in case["text"] for help_text in ["–ü–æ–º–æ—â", "–ø–æ–º–æ—â"]):
                    await common_handler.help_and_support_handler(message)
                    print(f"    ‚úÖ Help handler processed")
                
                # –¢–µ—Å—Ç –Ω–∞ —Å—Ç–∞—Ç—É—Å
                elif case["text"] and "—Å—Ç–∞—Ç—É—Å" in case["text"]:
                    await common_handler.status_handler(message)
                    print(f"    ‚úÖ Status handler processed")
                
                # –¢–µ—Å—Ç fallback handler
                else:
                    from aiogram.fsm.context import FSMContext
                    mock_state = MagicMock(spec=FSMContext)
                    mock_state.get_data = AsyncMock(return_value={})
                    await fallback_handler.handle_unexpected_text(message, mock_state)
                    print(f"    ‚úÖ Fallback handler processed")
                
            except Exception as e:
                print(f"    ‚ùå Error processing {case['description']}: {e}")
                continue
        
        print("‚úÖ Text message tests completed")
        return True
        
    except Exception as e:
        print(f"‚ùå Text message test setup failed: {e}")
        return False


async def test_media_messages():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    print("üé• Testing media message handling...")
    
    media_test_cases = [
        {
            "content_type": "photo",
            "description": "Photo message",
            "photo": [{"file_id": "photo_123", "width": 1280, "height": 720}]
        },
        {
            "content_type": "audio",
            "description": "Audio message", 
            "audio": {"file_id": "audio_123", "duration": 180}
        },
        {
            "content_type": "voice",
            "description": "Voice message",
            "voice": {"file_id": "voice_123", "duration": 30}
        },
        {
            "content_type": "video",
            "description": "Video message",
            "video": {"file_id": "video_123", "duration": 60, "width": 1920, "height": 1080}
        },
        {
            "content_type": "video_note",
            "description": "Video note (round video)",
            "video_note": {"file_id": "videonote_123", "duration": 15}
        },
        {
            "content_type": "document",
            "description": "Document message",
            "document": {"file_id": "doc_123", "file_name": "test.pdf"}
        },
        {
            "content_type": "sticker",
            "description": "Sticker message",
            "sticker": {"file_id": "sticker_123", "emoji": "üòÄ"}
        },
        {
            "content_type": "animation",
            "description": "GIF/Animation",
            "animation": {"file_id": "gif_123", "duration": 5}
        },
        {
            "content_type": "contact",
            "description": "Contact share",
            "contact": {"phone_number": "+1234567890", "first_name": "John"}
        },
        {
            "content_type": "location",
            "description": "Location share",
            "location": {"latitude": 55.7558, "longitude": 37.6176}
        }
    ]
    
    try:
        from bot.handlers.fallback import SmartFallbackHandler
        from bot.handlers.registration import RegistrationHandler
        from pathlib import Path
        from services.cache import get_cache
        from unittest.mock import MagicMock
        
        fallback_handler = SmartFallbackHandler()
        
        # Mock cache for registration handler
        mock_cache = MagicMock()
        mock_bot = AsyncMock()
        
        for case in media_test_cases:
            try:
                print(f"  Testing: {case['description']}")
                
                # –°–æ–∑–¥–∞–µ–º mock —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
                message_kwargs = {k: v for k, v in case.items() 
                                if k not in ["content_type", "description"]}
                
                message = MockMessage(
                    content_type=case["content_type"],
                    **message_kwargs
                )
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback handler (–æ–Ω –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –º–µ–¥–∏–∞)
                from aiogram.fsm.context import FSMContext
                mock_state = MagicMock(spec=FSMContext)
                mock_state.get_data = AsyncMock(return_value={})
                mock_state.get_state = AsyncMock(return_value=None)
                
                if case["content_type"] == "photo":
                    await fallback_handler.handle_unexpected_photo(message, mock_state)
                elif case["content_type"] == "voice":
                    await fallback_handler.handle_unexpected_voice(message, mock_state)
                elif case["content_type"] == "sticker":
                    await fallback_handler.handle_unexpected_sticker(message, mock_state)
                elif case["content_type"] == "contact":
                    await fallback_handler.handle_unexpected_contact(message, mock_state)
                else:
                    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
                    await fallback_handler.handle_unexpected_text(message, mock_state)
                
                print(f"    ‚úÖ {case['description']} processed successfully")
                
            except Exception as e:
                print(f"    ‚ö†Ô∏è {case['description']} handling: {e}")
                # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                continue
        
        print("‚úÖ Media message tests completed")
        return True
        
    except Exception as e:
        print(f"‚ùå Media message test setup failed: {e}")
        return False


async def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
    
    print("üîç Testing edge cases...")
    
    edge_cases = [
        {
            "description": "Message without from_user",
            "setup": lambda: MockMessage(text="test", from_user=None)
        },
        {
            "description": "Message without chat",
            "setup": lambda: MockMessage(text="test", chat=None)
        },
        {
            "description": "Very rapid messages (spam simulation)",
            "setup": lambda: [MockMessage(text=f"spam {i}") for i in range(10)]
        },
        {
            "description": "Unicode and special characters",
            "setup": lambda: MockMessage(text="üåçüî•üíØ –¢–µ—Å—Ç ‰∏≠Êñá ÿßŸÑÿπÿ±ÿ®Ÿäÿ© üöÄ")
        },
        {
            "description": "Extremely long message",
            "setup": lambda: MockMessage(text="A" * 5000)
        }
    ]
    
    try:
        from bot.handlers.fallback import SmartFallbackHandler
        fallback_handler = SmartFallbackHandler()
        
        for case in edge_cases:
            try:
                print(f"  Testing: {case['description']}")
                
                test_data = case["setup"]()
                
                if isinstance(test_data, list):
                    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    for msg in test_data:
                        try:
                            from aiogram.fsm.context import FSMContext
                            mock_state = MagicMock(spec=FSMContext)
                            mock_state.get_data = AsyncMock(return_value={})
                            await fallback_handler.handle_unexpected_text(msg, mock_state)
                        except:
                            pass  # –û–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è —Å–ø–∞–º-—Ç–µ—Å—Ç–æ–≤
                else:
                    # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    from aiogram.fsm.context import FSMContext
                    mock_state = MagicMock(spec=FSMContext)
                    mock_state.get_data = AsyncMock(return_value={})
                    await fallback_handler.handle_unexpected_text(test_data, mock_state)
                
                print(f"    ‚úÖ {case['description']} handled")
                
            except Exception as e:
                print(f"    ‚ö†Ô∏è {case['description']}: {e}")
                # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                continue
        
        print("‚úÖ Edge case tests completed")
        return True
        
    except Exception as e:
        print(f"‚ùå Edge case test setup failed: {e}")
        return False


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    print("üöÄ Starting comprehensive message format tests...\n")
    
    results = []
    
    # –¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    results.append(await test_text_messages())
    print()
    
    # –¢–µ—Å—Ç –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    results.append(await test_media_messages())
    print()
    
    # –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    results.append(await test_edge_cases())
    print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    passed = sum(results)
    total = len(results)
    
    print(f"üìä Message Format Tests Summary:")
    print(f"   Passed: {passed}/{total}")
    
    if passed == total:
        print("üéâ All message format tests passed!")
        print("‚úÖ Bot should handle all message types correctly")
    else:
        print("‚ö†Ô∏è Some tests had issues - check logs above")
    
    return passed == total


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
