#!/usr/bin/env python3
"""Comprehensive tests for all bot buttons and keyboards."""

import asyncio
import logging
import sys
import os
from unittest.mock import AsyncMock, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class MockMessage:
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    
    def __init__(self, text="", **kwargs):
        self.message_id = 12345
        self.text = text
        self.from_user = MagicMock()
        self.from_user.id = 123456789
        self.from_user.first_name = "Test"
        self.from_user.last_name = "User"
        self.chat = MagicMock()
        self.chat.id = 123456789
        self.bot = AsyncMock()
        
        for key, value in kwargs.items():
            setattr(self, key, value)
        
        self.answer = AsyncMock()
        self.reply = AsyncMock()


class MockCallbackQuery:
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è callback query."""
    
    def __init__(self, data="", **kwargs):
        self.id = "callback_123"
        self.data = data
        self.from_user = MagicMock()
        self.from_user.id = 123456789
        self.message = MockMessage()
        self.bot = AsyncMock()
        
        for key, value in kwargs.items():
            setattr(self, key, value)
        
        self.answer = AsyncMock()


async def test_main_menu_buttons():
    """–¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    
    print("üè† Testing main menu buttons...")
    
    main_menu_buttons = [
        {
            "text": "üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            "description": "Start registration button",
            "handler": "registration"
        },
        {
            "text": "‚úÖ –ú–æ–π —Å—Ç–∞—Ç—É—Å", 
            "description": "Status button",
            "handler": "status"
        },
        {
            "text": "üí¨ –ü–æ–º–æ—â—å",
            "description": "Help/Support button", 
            "handler": "help"
        },
        {
            "text": "üìä –û —Ä–æ–∑—ã–≥—Ä—ã—à–µ",
            "description": "Info button",
            "handler": "info"
        }
    ]
    
    try:
        from bot.handlers.common import CommonHandlers
        from bot.handlers.registration import RegistrationHandler
        from pathlib import Path
        from unittest.mock import MagicMock
        
        common_handler = CommonHandlers()
        
        for button in main_menu_buttons:
            try:
                print(f"  Testing: {button['description']} - '{button['text']}'")
                
                message = MockMessage(text=button["text"])
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                if button["handler"] == "status":
                    await common_handler.status_handler(message)
                elif button["handler"] == "help":
                    await common_handler.help_and_support_handler(message)
                elif button["handler"] == "info":
                    await common_handler.show_info_menu(message)
                elif button["handler"] == "registration":
                    # –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π setup
                    print(f"    ‚úÖ Registration button recognized")
                
                print(f"    ‚úÖ {button['description']} processed")
                
            except Exception as e:
                print(f"    ‚ùå Error with {button['description']}: {e}")
                continue
        
        print("‚úÖ Main menu button tests completed")
        return True
        
    except Exception as e:
        print(f"‚ùå Main menu test setup failed: {e}")
        return False


async def test_registration_buttons():
    """–¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    
    print("üìù Testing registration process buttons...")
    
    registration_buttons = [
        {
            "text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            "description": "Back to main menu"
        },
        {
            "text": "üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
            "description": "Share contact"
        },
        {
            "text": "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            "description": "Skip step"
        },
        {
            "text": "üì± –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ",
            "description": "Take photo"
        },
        {
            "text": "üñºÔ∏è –í—ã–±—Ä–∞—Ç—å –∏–∑ –≥–∞–ª–µ—Ä–µ–∏",
            "description": "Choose from gallery"
        },
        {
            "text": "‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –ª–∏—Ñ–ª–µ—Ç?",
            "description": "Leaflet help"
        },
        {
            "text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–º–µ–Ω–∏",
            "description": "Back to name"
        },
        {
            "text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É", 
            "description": "Back to phone"
        },
        {
            "text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–µ",
            "description": "Back to card"
        }
    ]
    
    try:
        from bot.handlers.fallback import SmartFallbackHandler
        
        fallback_handler = SmartFallbackHandler()
        
        for button in registration_buttons:
            try:
                print(f"  Testing: {button['description']} - '{button['text']}'")
                
                message = MockMessage(text=button["text"])
                
                # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è fallback handler'–æ–º
                # –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                from aiogram.fsm.context import FSMContext
                mock_state = MagicMock(spec=FSMContext)
                mock_state.get_data = AsyncMock(return_value={})
                mock_state.get_state = AsyncMock(return_value=None)
                
                await fallback_handler.handle_unexpected_text(message, mock_state)
                
                print(f"    ‚úÖ {button['description']} processed")
                
            except Exception as e:
                print(f"    ‚ö†Ô∏è {button['description']}: {e}")
                # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                continue
        
        print("‚úÖ Registration button tests completed")
        return True
        
    except Exception as e:
        print(f"‚ùå Registration button test setup failed: {e}")
        return False


async def test_support_buttons():
    """–¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    
    print("üí¨ Testing support system buttons...")
    
    support_buttons = [
        {
            "text": "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
            "description": "FAQ button"
        },
        {
            "text": "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "description": "Write message"
        },
        {
            "text": "üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è",
            "description": "My tickets"
        },
        {
            "text": "üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ",
            "description": "Attach photo"
        },
        {
            "text": "üìÑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç",
            "description": "Attach document"
        },
        {
            "text": "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ",
            "description": "Send ticket"
        },
        {
            "text": "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            "description": "Change category"
        },
        {
            "text": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫",
            "description": "Clear draft"
        }
    ]
    
    try:
        from bot.handlers.support import SupportHandler
        from bot.handlers.fallback import SmartFallbackHandler
        
        support_handler = SupportHandler()
        fallback_handler = SmartFallbackHandler()
        
        for button in support_buttons:
            try:
                print(f"  Testing: {button['description']} - '{button['text']}'")
                
                message = MockMessage(text=button["text"])
                
                # –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ fallback handler
                from aiogram.fsm.context import FSMContext
                mock_state = MagicMock(spec=FSMContext)
                mock_state.get_data = AsyncMock(return_value={})
                mock_state.get_state = AsyncMock(return_value=None)
                
                await fallback_handler.handle_unexpected_text(message, mock_state)
                
                print(f"    ‚úÖ {button['description']} processed")
                
            except Exception as e:
                print(f"    ‚ö†Ô∏è {button['description']}: {e}")
                continue
        
        print("‚úÖ Support button tests completed")
        return True
        
    except Exception as e:
        print(f"‚ùå Support button test setup failed: {e}")
        return False


async def test_inline_buttons():
    """–¢–µ—Å—Ç inline –∫–Ω–æ–ø–æ–∫ (callback queries)."""
    
    print("üîò Testing inline buttons (callbacks)...")
    
    inline_buttons = [
        {
            "data": "info_rules",
            "description": "Rules info callback"
        },
        {
            "data": "info_prizes", 
            "description": "Prizes info callback"
        },
        {
            "data": "info_schedule",
            "description": "Schedule info callback"
        },
        {
            "data": "info_fairness",
            "description": "Fairness info callback"
        },
        {
            "data": "info_contacts",
            "description": "Contacts info callback"
        },
        {
            "data": "faq_registration",
            "description": "Registration FAQ"
        },
        {
            "data": "faq_results",
            "description": "Results FAQ"
        },
        {
            "data": "faq_prizes",
            "description": "Prizes FAQ"
        },
        {
            "data": "faq_photo",
            "description": "Photo problems FAQ"
        },
        {
            "data": "create_ticket",
            "description": "Create support ticket"
        },
        {
            "data": "view_ticket_123",
            "description": "View specific ticket"
        },
        {
            "data": "back_to_tickets_list",
            "description": "Back to tickets list"
        }
    ]
    
    try:
        from bot.handlers.common import CommonHandlers
        from bot.handlers.support import SupportHandler
        
        common_handler = CommonHandlers()
        support_handler = SupportHandler()
        
        for button in inline_buttons:
            try:
                print(f"  Testing: {button['description']} - '{button['data']}'")
                
                callback = MockCallbackQuery(data=button["data"])
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                if button["data"].startswith("info_"):
                    await common_handler.handle_info_callback(callback)
                elif button["data"] == "back_to_tickets_list":
                    await support_handler.back_to_tickets_list(callback)
                elif button["data"].startswith("view_ticket_"):
                    await support_handler.handle_view_ticket(callback)
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback'–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∏ –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç –æ—à–∏–±–æ–∫
                    print(f"    ‚úÖ Callback structure recognized")
                
                print(f"    ‚úÖ {button['description']} processed")
                
            except Exception as e:
                print(f"    ‚ö†Ô∏è {button['description']}: {e}")
                continue
        
        print("‚úÖ Inline button tests completed")
        return True
        
    except Exception as e:
        print(f"‚ùå Inline button test setup failed: {e}")
        return False


async def test_keyboard_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
    
    print("‚å®Ô∏è Testing keyboard generation...")
    
    keyboard_tests = [
        {
            "function": "get_main_menu_keyboard",
            "args": ["approved"],
            "description": "Main menu for approved user"
        },
        {
            "function": "get_main_menu_keyboard", 
            "args": ["pending"],
            "description": "Main menu for pending user"
        },
        {
            "function": "get_main_menu_keyboard",
            "args": [None],
            "description": "Main menu for new user"
        },
        {
            "function": "get_faq_keyboard",
            "args": [],
            "description": "FAQ inline keyboard"
        },
        {
            "function": "get_status_keyboard",
            "args": [],
            "description": "Status keyboard"
        },
        {
            "function": "get_info_menu_keyboard",
            "args": [],
            "description": "Info menu keyboard"
        }
    ]
    
    try:
        from bot.keyboards.main_menu import (
            get_main_menu_keyboard, get_faq_keyboard, 
            get_status_keyboard, get_info_menu_keyboard
        )
        
        for test in keyboard_tests:
            try:
                print(f"  Testing: {test['description']}")
                
                func = eval(test["function"])
                keyboard = func(*test["args"])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                if hasattr(keyboard, 'keyboard'):
                    button_count = sum(len(row) for row in keyboard.keyboard)
                    print(f"    ‚úÖ Generated keyboard with {button_count} buttons")
                elif hasattr(keyboard, 'inline_keyboard'):
                    button_count = sum(len(row) for row in keyboard.inline_keyboard)
                    print(f"    ‚úÖ Generated inline keyboard with {button_count} buttons")
                else:
                    print(f"    ‚úÖ Keyboard object created")
                
            except Exception as e:
                print(f"    ‚ùå Error generating {test['description']}: {e}")
                continue
        
        print("‚úÖ Keyboard generation tests completed")
        return True
        
    except Exception as e:
        print(f"‚ùå Keyboard generation test setup failed: {e}")
        return False


async def test_button_text_variations():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫."""
    
    print("üî§ Testing button text variations...")
    
    text_variations = [
        {
            "variations": ["‚úÖ –ú–æ–π —Å—Ç–∞—Ç—É—Å", "üìã –ú–æ–π —Å—Ç–∞—Ç—É—Å", "–ú–æ–π —Å—Ç–∞—Ç—É—Å", "—Å—Ç–∞—Ç—É—Å"],
            "handler": "status",
            "description": "Status button variations"
        },
        {
            "variations": ["üí¨ –ü–æ–º–æ—â—å", "‚ùì –ü–æ–º–æ—â—å", "–ü–æ–º–æ—â—å", "–ø–æ–º–æ—â—å"],
            "handler": "help", 
            "description": "Help button variations"
        },
        {
            "variations": ["üìä –û —Ä–æ–∑—ã–≥—Ä—ã—à–µ", "–û —Ä–æ–∑—ã–≥—Ä—ã—à–µ", "—Ä–æ–∑—ã–≥—Ä—ã—à"],
            "handler": "info",
            "description": "Info button variations"
        }
    ]
    
    try:
        from bot.handlers.common import CommonHandlers
        common_handler = CommonHandlers()
        
        for test in text_variations:
            print(f"  Testing: {test['description']}")
            
            for variation in test["variations"]:
                try:
                    message = MockMessage(text=variation)
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    if test["handler"] == "status":
                        await common_handler.status_handler(message)
                    elif test["handler"] == "help":
                        await common_handler.help_and_support_handler(message)
                    elif test["handler"] == "info":
                        await common_handler.show_info_menu(message)
                    
                    print(f"    ‚úÖ '{variation}' processed")
                    
                except Exception as e:
                    print(f"    ‚ö†Ô∏è '{variation}': {e}")
                    continue
        
        print("‚úÖ Button text variation tests completed")
        return True
        
    except Exception as e:
        print(f"‚ùå Button text variation test setup failed: {e}")
        return False


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫."""
    
    print("üöÄ Starting comprehensive button tests...\n")
    
    results = []
    
    # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    results.append(await test_main_menu_buttons())
    print()
    
    # –¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    results.append(await test_registration_buttons())
    print()
    
    # –¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
    results.append(await test_support_buttons())
    print()
    
    # –¢–µ—Å—Ç inline –∫–Ω–æ–ø–æ–∫
    results.append(await test_inline_buttons())
    print()
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    results.append(await test_keyboard_generation())
    print()
    
    # –¢–µ—Å—Ç –≤–∞—Ä–∏–∞—Ü–∏–π —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫
    results.append(await test_button_text_variations())
    print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    passed = sum(results)
    total = len(results)
    
    print(f"üìä Button Tests Summary:")
    print(f"   Passed: {passed}/{total}")
    
    if passed == total:
        print("üéâ All button tests passed!")
        print("‚úÖ Bot should handle all button interactions correctly")
    else:
        print("‚ö†Ô∏è Some button tests had issues - check logs above")
    
    return passed == total


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)
