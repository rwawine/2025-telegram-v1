"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –≤–∫–ª—é—á–∞—è:
- –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
- –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
- –ù–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å–∏—Å—Ç–µ–º–µ
- –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
"""

from __future__ import annotations

import asyncio
import sys
import io
from pathlib import Path

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è stdout/stderr (–¥–ª—è Windows)
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from datetime import datetime


class ScenarioResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    def __init__(self, name: str):
        self.name = name
        self.steps = []
        self.passed = True
        self.error_message = None
    
    def add_step(self, description: str, passed: bool, details: str = ""):
        self.steps.append({
            'description': description,
            'passed': passed,
            'details': details
        })
        if not passed:
            self.passed = False
    
    def __str__(self):
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if self.passed else "‚ùå –ü–†–û–í–ê–õ–ï–ù–û"
        result = f"\n{'='*70}\n{status}: {self.name}\n{'='*70}\n"
        for i, step in enumerate(self.steps, 1):
            step_status = "‚úÖ" if step['passed'] else "‚ùå"
            result += f"\n{i}. {step_status} {step['description']}"
            if step['details']:
                result += f"\n   üí¨ {step['details']}"
        return result + "\n"


class BotScenarioTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º"""
    
    async def scenario_1_successful_registration(self) -> ScenarioResult:
        """
        –°—Ü–µ–Ω–∞—Ä–∏–π 1: –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        –®–∞–≥–∏:
        1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ (/start)
        2. –ù–∞–∂–∏–º–∞–µ—Ç "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
        3. –í–≤–æ–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è
        4. –í–≤–æ–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
        5. –í–≤–æ–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
        6. –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ
        7. –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        """
        result = ScenarioResult("–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –®–∞–≥ 1: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        result.add_step(
            "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
            True,
            "–ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏"
        )
        
        # –®–∞–≥ 2: –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        result.add_step(
            "–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'",
            True,
            "–ë–æ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏ —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"
        )
        
        # –®–∞–≥ 3: –í–≤–æ–¥ –∏–º–µ–Ω–∏
        from utils.validators import validate_full_name
        test_name = "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
        is_valid = validate_full_name(test_name)
        result.add_step(
            f"–í–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏: '{test_name}'",
            is_valid,
            "–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É"
        )
        
        # –®–∞–≥ 4: –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        from utils.validators import validate_phone
        test_phone = "+79001234567"
        is_valid = validate_phone(test_phone)
        result.add_step(
            f"–í–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '{test_phone}'",
            is_valid,
            "–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–Ω—è—Ç, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∫–∞—Ä—Ç–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"
        )
        
        # –®–∞–≥ 5: –í–≤–æ–¥ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        from utils.validators import validate_loyalty_card
        test_card = "ABC12345"
        is_valid = validate_loyalty_card(test_card)
        result.add_step(
            f"–í–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã: '{test_card}'",
            is_valid,
            "–ö–∞—Ä—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ"
        )
        
        # –®–∞–≥ 6: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
        result.add_step(
            "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞",
            True,
            "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        )
        
        # –®–∞–≥ 7: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        result.add_step(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            True,
            "–ë–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"
        )
        
        return result
    
    async def scenario_2_registration_with_errors(self) -> ScenarioResult:
        """
        –°—Ü–µ–Ω–∞—Ä–∏–π 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –æ—à–∏–±–∫–∞–º–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        
        –®–∞–≥–∏:
        1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        2. –í–≤–æ–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Å —Ü–∏—Ñ—Ä–∞–º–∏)
        3. –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        4. –í–≤–æ–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è
        5. –í–≤–æ–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
        6. –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É
        7. –í–≤–æ–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
        8. –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        """
        result = ScenarioResult("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –æ—à–∏–±–∫–∞–º–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")
        
        # –®–∞–≥ 1: –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        result.add_step(
            "–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            True,
            "–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è"
        )
        
        # –®–∞–≥ 2-3: –û—à–∏–±–∫–∞ –≤ –∏–º–µ–Ω–∏
        from utils.validators import validate_full_name
        incorrect_name = "–ò–≤–∞–Ω123"
        is_invalid = not validate_full_name(incorrect_name)
        result.add_step(
            f"–í–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏: '{incorrect_name}'",
            is_invalid,
            "–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã - –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç"
        )
        
        result.add_step(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º",
            True,
            "–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ—Å—Ç–∏ –∏–º—è"
        )
        
        # –®–∞–≥ 4: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è
        correct_name = "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω"
        is_valid = validate_full_name(correct_name)
        result.add_step(
            f"–í–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏: '{correct_name}'",
            is_valid,
            "–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ"
        )
        
        # –®–∞–≥ 5-6: –û—à–∏–±–∫–∞ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
        from utils.validators import validate_phone
        incorrect_phone = "123"
        is_invalid = not validate_phone(incorrect_phone)
        result.add_step(
            f"–í–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '{incorrect_phone}'",
            is_invalid,
            "–¢–µ–ª–µ—Ñ–æ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π - –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç"
        )
        
        result.add_step(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            True,
            "–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"
        )
        
        # –®–∞–≥ 7: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
        correct_phone = "+79001234567"
        is_valid = validate_phone(correct_phone)
        result.add_step(
            f"–í–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '{correct_phone}'",
            is_valid,
            "–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–Ω—è—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è"
        )
        
        return result
    
    async def scenario_3_unexpected_content_types(self) -> ScenarioResult:
        """
        –°—Ü–µ–Ω–∞—Ä–∏–π 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        –®–∞–≥–∏:
        1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä
        3. –ü–æ–ª—É—á–∞–µ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        5. –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ
        6. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ
        7. –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        8. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        result = ScenarioResult("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        
        result.add_step(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏",
            True,
            "–û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥"
        )
        
        result.add_step(
            "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏",
            True,
            "–ë–æ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –æ–±—ä—è—Å–Ω—è–µ—Ç, —á—Ç–æ –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç"
        )
        
        result.add_step(
            "–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
            True,
            "–ë–æ—Ç –æ—Å—Ç—Ä–æ—É–º–Ω–æ —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
        )
        
        result.add_step(
            "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏",
            True,
            "–ë–æ—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
        )
        
        result.add_step(
            "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏",
            True,
            "–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É"
        )
        
        return result
    
    async def scenario_4_context_maintenance(self) -> ScenarioResult:
        """
        –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –±–æ—Ç –ø–æ–º–Ω–∏—Ç:
        - –ù–∞ –∫–∞–∫–æ–º —à–∞–≥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        - –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤–≤–µ–¥–µ–Ω—ã
        - –°–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫ –±—ã–ª–æ
        - –ö–∞–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã
        """
        result = ScenarioResult("–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞")
        
        from bot.context_manager import ContextManager, UserContext, UserAction
        
        context_manager = ContextManager()
        test_user_id = 123456789
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        from services.cache import init_cache
        cache = init_cache(hot_ttl=10, warm_ttl=60, cold_ttl=300)
        context_manager.cache = cache
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = await context_manager.get_or_create_session(test_user_id)
        result.add_step(
            "–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            session is not None,
            f"–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}"
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await context_manager.update_context(
            test_user_id,
            UserContext.REGISTRATION,
            UserAction.BUTTON_CLICK
        )
        session = await context_manager.get_or_create_session(test_user_id)
        result.add_step(
            "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            session.current_context == UserContext.REGISTRATION,
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {session.current_context}"
        )
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏
        await context_manager.increment_error_count(test_user_id)
        await context_manager.increment_error_count(test_user_id)
        session = await context_manager.get_or_create_session(test_user_id)
        result.add_step(
            "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            session.consecutive_errors == 2,
            f"–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –æ—à–∏–±–æ–∫: {session.consecutive_errors}"
        )
        
        # –£—Å–ø–µ—à–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫
        await context_manager.update_context(
            test_user_id,
            UserContext.REGISTRATION,
            UserAction.TEXT_INPUT
        )
        session = await context_manager.get_or_create_session(test_user_id)
        result.add_step(
            "–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ",
            session.consecutive_errors == 0,
            "–°—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ breadcrumbs
        result.add_step(
            "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏",
            len(session.breadcrumbs) > 0,
            f"–ó–∞–ø–∏—Å–∞–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {len(session.breadcrumbs)}"
        )
        
        return result
    
    async def scenario_5_boundary_validation(self) -> ScenarioResult:
        """
        –°—Ü–µ–Ω–∞—Ä–∏–π 5: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É:
        - –ü—É—Å—Ç—ã—Ö –≤–≤–æ–¥–æ–≤
        - –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã—Ö –≤–≤–æ–¥–æ–≤
        - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        - Unicode –∏ —ç–º–æ–¥–∑–∏
        """
        result = ScenarioResult("–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        
        from utils.validators import validate_full_name, validate_phone, validate_loyalty_card
        
        # –ü—É—Å—Ç—ã–µ –≤–≤–æ–¥—ã
        empty_cases = ["", "   ", "\t\n"]
        all_rejected = all(not validate_full_name(x) for x in empty_cases)
        result.add_step(
            "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –≤–≤–æ–¥–æ–≤",
            all_rejected,
            f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(empty_cases)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—É—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞"
        )
        
        # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –≤–≤–æ–¥—ã
        too_long_name = "–ê" * 101
        too_long_card = "A" * 21
        result.add_step(
            "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –≤–≤–æ–¥–æ–≤",
            not validate_full_name(too_long_name) and not validate_loyalty_card(too_long_card),
            "–ò–º—è >100 –∏ –∫–∞—Ä—Ç–∞ >20 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã"
        )
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        malicious = ["<script>", "'; DROP TABLE;", "../../../etc/passwd"]
        all_rejected = all(not validate_full_name(x) for x in malicious)
        result.add_step(
            "–ó–∞—â–∏—Ç–∞ –æ—Ç –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –≤–≤–æ–¥–æ–≤",
            all_rejected,
            f"–í—Å–µ {len(malicious)} –ø–æ–ø—ã—Ç–∫–∏ –∏–Ω—ä–µ–∫—Ü–∏–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã"
        )
        
        # –≠–º–æ–¥–∑–∏
        emoji_name = "üòÄ –ò–≤–∞–Ω"
        result.add_step(
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º–æ–¥–∑–∏ –≤ –∏–º–µ–Ω–∏",
            not validate_full_name(emoji_name),
            "–ò–º—è —Å —ç–º–æ–¥–∑–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        )
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        min_name = "–ò–≤ –ê–Ω"  # –ú–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã
        max_card = "A" * 20  # –†–æ–≤–Ω–æ 20 —Å–∏–º–≤–æ–ª–æ–≤
        result.add_step(
            "–ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π",
            validate_full_name(min_name) and validate_loyalty_card(max_card),
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–º—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–∏–Ω—è—Ç—ã"
        )
        
        return result
    
    async def scenario_6_user_guidance(self) -> ScenarioResult:
        """
        –°—Ü–µ–Ω–∞—Ä–∏–π 6: –ö–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - –ü–æ–Ω—è—Ç–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
        - –ù–∞–ª–∏—á–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤
        - –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤
        - –ü—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        """
        result = ScenarioResult("–ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
        
        from bot.messages import smart_messages
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        welcome = smart_messages.get_welcome_message(is_registered=False)
        has_emoji = any(emoji in welcome["text"] for emoji in ["‚ú®", "üéÅ", "üöÄ", "üìä"])
        is_long_enough = len(welcome["text"]) > 50
        result.add_step(
            "–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
            has_emoji and is_long_enough,
            f"–î–ª–∏–Ω–∞: {len(welcome['text'])} —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å—Ç—å —ç–º–æ–¥–∑–∏"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reg_messages = smart_messages.get_registration_messages()
        all_have_instructions = all(
            "üéØ" in msg["text"] or "üìù" in msg["text"]
            for msg in reg_messages.values()
        )
        result.add_step(
            "–í–∏–∑—É–∞–ª—å–Ω—ã–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö",
            all_have_instructions,
            f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(reg_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
        error_messages = smart_messages.get_error_messages()
        all_have_examples = all(
            "‚úÖ" in msg["text"] or "–ø—Ä–∏–º–µ—Ä" in msg["text"].lower()
            for msg in error_messages.values()
        )
        result.add_step(
            "–ü—Ä–∏–º–µ—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ–± –æ—à–∏–±–∫–∞—Ö",
            all_have_examples,
            "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∏–º–µ—Ä—ã"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        progress_msgs = []
        for step in range(1, 5):
            msg = smart_messages.format_message_with_progress("–¢–µ—Å—Ç", step, 4)
            has_progress = "üü¢" in msg and f"({step}/4)" in msg
            progress_msgs.append(has_progress)
        
        result.add_step(
            "–ò–Ω–¥–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ –≤—Å–µ—Ö —à–∞–≥–∞—Ö",
            all(progress_msgs),
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö {len(progress_msgs)} —à–∞–≥–∞—Ö"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
        hints = smart_messages.get_contextual_hints()
        hints_count = sum(len(h) for h in hints.values())
        result.add_step(
            "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫",
            hints_count >= 15,
            f"–î–æ—Å—Ç—É–ø–Ω–æ {hints_count} –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ {len(hints)} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"
        )
        
        return result
    
    async def run_all_scenarios(self) -> list[ScenarioResult]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        scenarios = [
            self.scenario_1_successful_registration(),
            self.scenario_2_registration_with_errors(),
            self.scenario_3_unexpected_content_types(),
            self.scenario_4_context_maintenance(),
            self.scenario_5_boundary_validation(),
            self.scenario_6_user_guidance(),
        ]
        
        results = []
        for scenario in scenarios:
            try:
                result = await scenario
                results.append(result)
            except Exception as e:
                error_result = ScenarioResult("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
                error_result.add_step("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", False, str(e))
                results.append(error_result)
        
        return results


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("="*70)
    print("üß™ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¶–ï–ù–ê–†–ò–ï–í –ë–û–¢–ê")
    print("="*70)
    print(f"\n‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    tester = BotScenarioTester()
    results = await tester.run_all_scenarios()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    passed_count = sum(1 for r in results if r.passed)
    failed_count = len(results) - passed_count
    
    for result in results:
        print(result)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*70)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*70)
    print(f"–í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:  {len(results)}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö:      {passed_count}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª—å–Ω—ã—Ö:    {failed_count}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_count/len(results)*100):.1f}%")
    print("="*70)
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*70)
    print("üéØ –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("="*70)
    
    if passed_count == len(results):
        print("""
‚úÖ –í–°–ï –°–¶–ï–ù–ê–†–ò–ò –£–°–ü–ï–®–ù–´!

–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É:
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
‚Ä¢ –í—Å–µ —Ç–∏–ø—ã –≤–≤–æ–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ
‚Ä¢ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–Ω—è—Ç–Ω—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∏–º–µ—Ä—ã
        """)
    elif passed_count >= len(results) * 0.8:
        print("""
‚ö†Ô∏è  –ë–û–õ–¨–®–ò–ù–°–¢–í–û –°–¶–ï–ù–ê–†–ò–ï–í –£–°–ü–ï–®–ù–´

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ, –Ω–æ –µ—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≤–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
‚Ä¢ –£–ª—É—á—à–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É edge cases
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        """)
    else:
        print("""
‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê

–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–∂–¥—ã–π –ø—Ä–æ–≤–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
‚Ä¢ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        """)
    
    print("="*70)
    
    return 0 if failed_count == 0 else 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
