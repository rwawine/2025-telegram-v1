"""–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""

import logging
from pathlib import Path
from typing import Optional, Tuple, Union

from aiogram.types import PhotoSize, Document

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ª–∏–º–∏—Ç–æ–≤ (–±–µ—Ä–µ–º –∏–∑ config, –Ω–æ —Å fallback)
DEFAULT_MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB
SUPPORTED_IMAGE_TYPES = ['.jpg', '.jpeg', '.png', '.webp']
SUPPORTED_DOCUMENT_TYPES = ['.pdf', '.doc', '.docx', '.txt']


class FileValidationError(Exception):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞."""
    pass


def get_max_file_size() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    try:
        from config import load_config
        return load_config().max_file_size
    except Exception:
        logger.warning("Failed to load max_file_size from config, using default")
        return DEFAULT_MAX_FILE_SIZE


def validate_file_size(file_size: Optional[int], file_type: str = "file") -> None:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞.
    
    Args:
        file_size: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
        file_type: –¢–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        
    Raises:
        FileValidationError: –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
    """
    if not file_size:
        return  # Telegram –Ω–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä
    
    max_size = get_max_file_size()
    
    if file_size > max_size:
        max_mb = max_size // (1024 * 1024)
        current_mb = file_size // (1024 * 1024)
        raise FileValidationError(
            f"üìÅ {file_type.capitalize()} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({current_mb} –ú–ë). "
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_mb} –ú–ë."
        )


def validate_image_file(photo: Union[PhotoSize, list[PhotoSize]]) -> PhotoSize:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        photo: PhotoSize –∏–ª–∏ —Å–ø–∏—Å–æ–∫ PhotoSize –æ—Ç Telegram
        
    Returns:
        PhotoSize: –ù–∞–∏–±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
        
    Raises:
        FileValidationError: –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é
    """
    if not photo:
        raise FileValidationError("üì∏ –§–æ—Ç–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
    
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ - –±–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä
    if isinstance(photo, list):
        if not photo:
            raise FileValidationError("üì∏ –§–æ—Ç–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
        largest_photo = max(photo, key=lambda p: p.file_size or 0)
    else:
        largest_photo = photo
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä
    validate_file_size(largest_photo.file_size, "—Ñ–æ—Ç–æ")
    
    return largest_photo


def validate_document_file(document: Document) -> Document:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        document: Document –æ—Ç Telegram
        
    Returns:
        Document: –í–∞–ª–∏–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        
    Raises:
        FileValidationError: –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é
    """
    if not document:
        raise FileValidationError("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä
    validate_file_size(document.file_size, "–¥–æ–∫—É–º–µ–Ω—Ç")
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if document.file_name:
        file_path = Path(document.file_name)
        file_ext = file_path.suffix.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
        # (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≤ –±—É–¥—É—â–µ–º)
        if file_ext and len(file_ext) > 10:  # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            logger.warning(f"Suspicious file extension: {file_ext}")
    
    return document


def get_safe_filename(original_name: Optional[str], file_id: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞.
    
    Args:
        original_name: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_id: ID —Ñ–∞–π–ª–∞ –≤ Telegram
        
    Returns:
        str: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    """
    if not original_name:
        return f"{file_id}.unknown"
    
    # –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    safe_name = "".join(c for c in original_name if c.isalnum() or c in ".-_")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(safe_name) > 100:
        path = Path(safe_name)
        name_part = path.stem[:80]
        ext_part = path.suffix[:20]
        safe_name = f"{name_part}{ext_part}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º file_id –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    path = Path(safe_name)
    return f"{file_id}_{path.stem}{path.suffix}"


def format_file_size(size_bytes: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.
    
    Args:
        size_bytes: –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    """
    if size_bytes < 1024:
        return f"{size_bytes} –ë"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} –ö–ë"
    else:
        return f"{size_bytes / (1024 * 1024):.1f} –ú–ë"


class FileValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    
    def __init__(self):
        self._max_size = None
        self._last_config_check = 0
    
    def _update_limits(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        import time
        now = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        if now - self._last_config_check > 60:
            self._max_size = get_max_file_size()
            self._last_config_check = now
    
    def validate_photo(self, photo: Union[PhotoSize, list[PhotoSize]]) -> Tuple[PhotoSize, str]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
        
        Returns:
            Tuple[PhotoSize, str]: (—Ñ–æ—Ç–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ)
        """
        try:
            self._update_limits()
            validated_photo = validate_image_file(photo)
            size_str = format_file_size(validated_photo.file_size or 0)
            return validated_photo, f"‚úÖ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ ({size_str})"
        except FileValidationError as e:
            return None, str(e)
    
    def validate_document(self, document: Document) -> Tuple[Optional[Document], str]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
        
        Returns:
            Tuple[Optional[Document], str]: (–¥–æ–∫—É–º–µ–Ω—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ)
        """
        try:
            self._update_limits()
            validated_doc = validate_document_file(document)
            size_str = format_file_size(validated_doc.file_size or 0)
            return validated_doc, f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç ({size_str})"
        except FileValidationError as e:
            return None, str(e)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
file_validator = FileValidator()
