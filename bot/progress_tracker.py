"""–í–∏–∑—É–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""

from typing import Dict, List, Tuple
from dataclasses import dataclass


@dataclass
class RegistrationStep:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–≥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    number: int
    name: str
    icon: str
    description: str
    estimated_time: str


class ProgressTracker:
    """–°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    
    STEPS = [
        RegistrationStep(1, "–ò–º—è", "üë§", "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è", "10 —Å–µ–∫"),
        RegistrationStep(2, "–¢–µ–ª–µ—Ñ–æ–Ω", "üì±", "–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä", "10 —Å–µ–∫"),
        RegistrationStep(3, "–ö–∞—Ä—Ç–∞", "üí≥", "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", "20 —Å–µ–∫"),
        RegistrationStep(4, "–§–æ—Ç–æ", "üì∏", "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞", "1 –º–∏–Ω"),
    ]
    
    @classmethod
    def get_progress_message(
        cls,
        current_step: int,
        completed_steps: List[int] = None,
        show_next: bool = True
    ) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.
        
        Args:
            current_step: –¢–µ–∫—É—â–∏–π —à–∞–≥ (1-4)
            completed_steps: –°–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
            show_next: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        """
        if completed_steps is None:
            completed_steps = list(range(1, current_step))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
        total = len(cls.STEPS)
        completed_count = len([s for s in completed_steps if s <= total])
        percentage = int((completed_count / total) * 100)
        
        message = f"üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {percentage}%\n\n"
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        filled = int(percentage / 10)
        bar = "‚ñà" * filled + "‚ñë" * (10 - filled)
        message += f"‚îå{'‚îÄ' * 12}‚îê\n"
        message += f"‚îÇ {bar} ‚îÇ\n"
        message += f"‚îî{'‚îÄ' * 12}‚îò\n\n"
        
        # –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
        message += "*–≠—Ç–∞–ø—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:*\n"
        for step in cls.STEPS:
            if step.number < current_step or step.number in completed_steps:
                # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —à–∞–≥
                status = "‚úÖ"
                text_style = "~"
            elif step.number == current_step:
                # –¢–µ–∫—É—â–∏–π —à–∞–≥
                status = "‚ñ∂Ô∏è"
                text_style = "*"
            else:
                # –ë—É–¥—É—â–∏–π —à–∞–≥
                status = "‚¨ú"
                text_style = ""
            
            if text_style:
                message += f"{status} {step.icon} {text_style}{step.name}{text_style} - {step.description}\n"
            else:
                message += f"{status} {step.icon} {step.name} - {step.description}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥–∏
        message += f"\n*–°–µ–π—á–∞—Å:* {cls.STEPS[current_step - 1].icon} {cls.STEPS[current_step - 1].name}\n"
        
        if show_next and current_step < total:
            next_step = cls.STEPS[current_step]
            message += f"*–î–∞–ª–µ–µ:* {next_step.icon} {next_step.name}\n"
        
        # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        remaining_time = cls._calculate_remaining_time(current_step)
        if remaining_time:
            message += f"\n‚è± *–û—Å—Ç–∞–ª–æ—Å—å:* ~{remaining_time}\n"
        
        return message
    
    @classmethod
    def get_compact_progress(cls, current_step: int, completed_steps: List[int] = None) -> str:
        """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if completed_steps is None:
            completed_steps = list(range(1, current_step))
        
        total = len(cls.STEPS)
        completed_count = len([s for s in completed_steps if s <= total])
        percentage = int((completed_count / total) * 100)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        icons = []
        for step in cls.STEPS:
            if step.number < current_step or step.number in completed_steps:
                icons.append("‚úÖ")
            elif step.number == current_step:
                icons.append("‚ñ∂Ô∏è")
            else:
                icons.append("‚¨ú")
        
        return f"{''.join(icons)} ({completed_count}/{total}) - {percentage}%"
    
    @classmethod
    def get_step_header(cls, step_number: int) -> str:
        """–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —à–∞–≥–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º."""
        step = cls.STEPS[step_number - 1]
        progress = cls.get_compact_progress(step_number)
        
        return (
            f"{step.icon} *–®–∞–≥ {step_number} –∏–∑ {len(cls.STEPS)}: {step.name}*\n"
            f"{progress}\n"
            f"‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ {step.estimated_time}\n"
        )
    
    @classmethod
    def _calculate_remaining_time(cls, current_step: int) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è."""
        if current_step >= len(cls.STEPS):
            return ""
        
        # –°—É–º–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —à–∞–≥–æ–≤
        time_map = {
            "30 —Å–µ–∫": 30,
            "20 —Å–µ–∫": 20,
            "1 –º–∏–Ω": 60
        }
        
        total_seconds = 0
        for step in cls.STEPS[current_step:]:
            total_seconds += time_map.get(step.estimated_time, 30)
        
        if total_seconds < 60:
            return f"{total_seconds} —Å–µ–∫"
        else:
            minutes = total_seconds // 60
            seconds = total_seconds % 60
            if seconds == 0:
                return f"{minutes} –º–∏–Ω"
            return f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
    
    @classmethod
    def get_completion_summary(cls, registration_time_seconds: float = None) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
        message = (
            "üéâ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
            "‚úÖ –í—Å–µ —à–∞–≥–∏ –ø—Ä–æ–π–¥–µ–Ω—ã:\n"
        )
        
        for step in cls.STEPS:
            message += f"‚úÖ {step.icon} {step.name}\n"
        
        message += "\n"
        
        if registration_time_seconds:
            minutes = int(registration_time_seconds // 60)
            seconds = int(registration_time_seconds % 60)
            if minutes > 0:
                time_str = f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
            else:
                time_str = f"{seconds} —Å–µ–∫"
            message += f"‚ö° –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {time_str}\n\n"
        
        message += (
            "üéØ *–ß—Ç–æ –¥–∞–ª—å—à–µ:*\n"
            "‚Ä¢ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n"
            "‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å: üìã –ú–æ–π —Å—Ç–∞—Ç—É—Å\n\n"
            "‚è∞ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤\n\n"
            "üçÄ *–£–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!*"
        )
        
        return message
    
    @classmethod
    def can_go_back(cls, current_step: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥."""
        return current_step > 1
    
    @classmethod
    def get_back_button_text(cls, current_step: int) -> str:
        """–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞."""
        if current_step <= 1:
            return ""
        
        prev_step = cls.STEPS[current_step - 2]
        return f"‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ {prev_step.name}"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
progress_tracker = ProgressTracker()

