"""–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM."""

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.keyboards import get_main_menu_keyboard_for_user
from bot.context_manager import get_context_manager, UserContext, UserAction


class GlobalCommandsHandler:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤–æ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö"""
    
    def __init__(self):
        self.router = Router()
        self.router.name = "global_commands"
        self._register_handlers()
    
    def setup(self, dispatcher) -> None:
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        dispatcher.include_router(self.router)
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã - —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –õ–Æ–ë–û–ú —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        self.router.message.register(self.handle_start, Command("start"))
        self.router.message.register(self.handle_cancel, Command("cancel"))
        self.router.message.register(self.handle_reset, Command("reset"))
        self.router.message.register(self.handle_help, Command("help"))
        
        # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ
        self.router.message.register(self.emergency_menu, F.text == "üÜò –ú–ï–ù–Æ")
        self.router.message.register(self.emergency_cancel, F.text == "‚ùå –û–¢–ú–ï–ù–ê")
    
    async def handle_start(self, message: types.Message, state: FSMContext) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /start - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é"""
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.update_context(
                message.from_user.id,
                UserContext.NAVIGATION,
                UserAction.BUTTON_CLICK
            )
        
        from database.repositories import get_participant_status
        from bot.messages import smart_messages
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        registration_status = await get_participant_status(message.from_user.id)
        is_registered = registration_status is not None
        
        # –ü–æ–ª—É—á–∞–µ–º —É–º–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_msg = smart_messages.get_welcome_message(is_registered)
        
        keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
        await message.answer(
            f"üîÑ **–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞**\n\n{welcome_msg['text']}", 
            reply_markup=keyboard, 
            parse_mode="Markdown"
        )
    
    async def handle_cancel(self, message: types.Message, state: FSMContext) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        current_state = await state.get_state()
        
        if current_state:
            await state.clear()
            await message.answer(
                "‚ùå **–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
                "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                "‚úÖ –ù–∏–∫–∞–∫–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–µ—Ç\n\n"
                "üè† –í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
            )
        
        keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    
    async def handle_reset(self, message: types.Message, state: FSMContext) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /reset - –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏"""
        await state.clear()
        
        context_manager = get_context_manager()
        if context_manager:
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context_manager.sessions.pop(message.from_user.id, None)
        
        await message.answer(
            "üîÑ **–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω**\n\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã",
            parse_mode="Markdown"
        )
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /start
        await self.handle_start(message, state)
    
    async def handle_help(self, message: types.Message, state: FSMContext) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /help - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å"""
        current_state = await state.get_state()
        
        help_text = (
            "üÜò **–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å**\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ `/start` - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "‚Ä¢ `/cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
            "‚Ä¢ `/reset` - –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å\n\n"
        )
        
        if current_state:
            help_text += f"üìç **–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:** `{current_state}`\n\n"
            help_text += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/cancel` –¥–ª—è –≤—ã—Ö–æ–¥–∞"
        else:
            help_text += "‚úÖ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
        
        await message.answer(help_text, parse_mode="Markdown")
    
    async def emergency_menu(self, message: types.Message, state: FSMContext) -> None:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é"""
        await state.clear()
        keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
        await message.answer(
            "üÜò **–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é**",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    async def emergency_cancel(self, message: types.Message, state: FSMContext) -> None:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
        await self.handle_cancel(message, state)


def setup_global_commands(dispatcher) -> GlobalCommandsHandler:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    handler = GlobalCommandsHandler()
    handler.setup(dispatcher)
    return handler
