"""–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM."""

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.keyboards import get_main_menu_keyboard_for_user
from bot.context_manager import get_context_manager, UserContext, UserAction


class GlobalCommandsHandler:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤–æ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö"""
    
    def __init__(self):
        self.router = Router()
        self.router.name = "global_commands"
        self._register_handlers()
    
    def setup(self, dispatcher) -> None:
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        dispatcher.include_router(self.router)
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã - —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –õ–Æ–ë–û–ú —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        self.router.message.register(self.handle_start, Command("start"))
        self.router.message.register(self.handle_cancel, Command("cancel"))
        self.router.message.register(self.handle_reset, Command("reset"))
        self.router.message.register(self.handle_help, Command("help"))
        self.router.message.register(self.handle_menu, Command("menu"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        from bot.states import RegistrationStates
        self.router.message.register(self.handle_agreement_accept, RegistrationStates.accept_agreement, F.text == "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é")
        self.router.message.register(self.handle_agreement_decline, RegistrationStates.accept_agreement, F.text == "‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω, –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é")
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
        self.router.message.register(self.block_declined_user, RegistrationStates.declined_agreement)
        
        # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ
        self.router.message.register(self.emergency_menu, F.text == "üÜò –ú–ï–ù–Æ")
        self.router.message.register(self.emergency_cancel, F.text == "‚ùå –û–¢–ú–ï–ù–ê")
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.router.message.register(self.back_to_menu, F.text.contains("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
        
        # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤–∫–ª—é—á–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫—É)
        self.router.message.register(self.back_to_menu, F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    async def handle_start(self, message: types.Message, state: FSMContext) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /start - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∏–ª–∏ –º–µ–Ω—é"""
        from database.repositories import get_participant_status, check_user_agreement
        from bot.messages import smart_messages
        from bot.states import RegistrationStates
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.update_context(
                message.from_user.id,
                UserContext.NAVIGATION,
                UserAction.BUTTON_CLICK
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        registration_status = await get_participant_status(message.from_user.id)
        is_registered = registration_status is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ
        agreement_accepted = await check_user_agreement(message.from_user.id)
        
        # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"User {message.from_user.id}: is_registered={is_registered}, agreement_accepted={agreement_accepted}")
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ò–õ–ò —Ä–∞–Ω–µ–µ –ø—Ä–∏–Ω—è–ª —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é
        if is_registered or agreement_accepted:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            welcome_msg = smart_messages.get_welcome_message(is_registered=is_registered)
            keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
            await message.answer(
                f"üîÑ **–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞**\n\n{welcome_msg['text']}", 
                reply_markup=keyboard, 
                parse_mode="Markdown"
            )
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–∞–∑–∞–ª—Å—è —Ä–∞–Ω–µ–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
            from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton
            
            agreement_text = (
                "‚ú® **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑–æ–≤!**\n\n"
                "üìã **–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö**\n\n"
                "–ü—Ä–∏–Ω–∏–º–∞—è —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å —á—Ç–æ:\n\n"
                "‚úÖ –¢—ã —Å–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
                "‚úÖ –¢—ã –ø—Ä–∏–Ω–∏–º–∞–µ—à—å –ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ü–∏–∏\n\n"
                "üìÑ –î–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–ª–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –Ω–∏–∂–µ"
            )
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–∏—è
            agreement_keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é")],
                    [KeyboardButton(text="‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω, –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é")]
                ],
                resize_keyboard=True
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
            pdf_path = "1_6_—Å–æ–≥–ª–∞—Å–∏–µ_–Ω–∞_–æ–±—Ä–∞–±–æ—Ç–∫—É_–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö_–¥–∞–Ω–Ω—ã—Ö.pdf"
            try:
                document = FSInputFile(pdf_path)
                await message.answer_document(
                    document=document,
                    caption=agreement_text,
                    parse_mode="Markdown",
                    reply_markup=agreement_keyboard
                )
            except Exception as e:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                await message.answer(
                    agreement_text,
                    parse_mode="Markdown",
                    reply_markup=agreement_keyboard
                )
            
            await state.set_state(RegistrationStates.accept_agreement)
    
    async def handle_cancel(self, message: types.Message, state: FSMContext) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        current_state = await state.get_state()
        
        if current_state:
            await state.clear()
            await message.answer(
                "‚ùå **–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
                "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                "‚úÖ –ù–∏–∫–∞–∫–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–µ—Ç\n\n"
                "üè† –í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
            )
        
        keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    
    async def handle_reset(self, message: types.Message, state: FSMContext) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /reset - –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏"""
        await state.clear()
        
        context_manager = get_context_manager()
        if context_manager:
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context_manager.sessions.pop(message.from_user.id, None)
        
        await message.answer(
            "üîÑ **–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω**\n\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã",
            parse_mode="Markdown"
        )
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /start
        await self.handle_start(message, state)
    
    async def handle_help(self, message: types.Message, state: FSMContext) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /help - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å"""
        current_state = await state.get_state()
        
        help_text = (
            "üÜò **–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å**\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ `/start` - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "‚Ä¢ `/cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
            "‚Ä¢ `/reset` - –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å\n\n"
        )
        
        if current_state:
            help_text += f"üìç **–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:** `{current_state}`\n\n"
            help_text += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/cancel` –¥–ª—è –≤—ã—Ö–æ–¥–∞"
        else:
            help_text += "‚úÖ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
        
        await message.answer(help_text, parse_mode="Markdown")

    async def handle_menu(self, message: types.Message, state: FSMContext) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /menu - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        await state.clear()
        keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)
    
    async def emergency_menu(self, message: types.Message, state: FSMContext) -> None:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é"""
        await state.clear()
        keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
        await message.answer(
            "üÜò **–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é**",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    async def emergency_cancel(self, message: types.Message, state: FSMContext) -> None:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
        await self.handle_cancel(message, state)
    
    async def back_to_menu(self, message: types.Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        # –û—á–∏—â–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.update_context(
                message.from_user.id,
                UserContext.NAVIGATION,
                UserAction.BUTTON_CLICK
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
        await message.answer(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    async def handle_agreement_accept(self, message: types.Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        await state.clear()
        
        from bot.messages import smart_messages
        from database.repositories import save_user_agreement
        import logging
        
        logger = logging.getLogger(__name__)
        logger.info(f"User {message.from_user.id} accepted agreement, saving to DB...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –≤ –ë–î
        await save_user_agreement(message.from_user.id)
        
        logger.info(f"User {message.from_user.id} agreement saved successfully")
        
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.update_context(
                message.from_user.id,
                UserContext.NAVIGATION,
                UserAction.BUTTON_CLICK
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        welcome_msg = smart_messages.get_welcome_message(is_registered=False)
        
        keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
        await message.answer(
            f"‚úÖ **–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!**\n\n{welcome_msg['text']}", 
            reply_markup=keyboard, 
            parse_mode="Markdown"
        )
    
    async def handle_agreement_decline(self, message: types.Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –æ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"""
        from bot.states import RegistrationStates
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"
        await state.set_state(RegistrationStates.declined_agreement)
        
        # –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ
        creative_messages = [
            "üåü **–ú—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ–º –≤–∞—Å –∂–¥–∞—Ç—å!**\n\n"
            "–î–≤–µ—Ä–∏ –Ω–∞—à–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è –≤–∞—Å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n"
            "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –≤–∞—Å –≤—Å—Ç—Ä–µ—Ç–∏–º! üéâ\n\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.\n"
            "–ù–∞–∂–º–∏—Ç–µ /start –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
            
            "üí´ **–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º!**\n\n"
            "–ù–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–∏–ª–µ.\n"
            "–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ‚Äî –º—ã –±—É–¥–µ–º –∑–¥–µ—Å—å! üö™‚ú®\n\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.\n"
            "–ù–∞–∂–º–∏—Ç–µ /start –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
            
            "üé≠ **–†–µ—à–µ–Ω–∏–µ –∑–∞ –≤–∞–º–∏!**\n\n"
            "–ë–∞–π–∫–∞–ª –ø–æ–¥–æ–∂–¥—ë—Ç, –∞ –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞.\n"
            "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º! üèîÔ∏è\n\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.\n"
            "–ù–∞–∂–º–∏—Ç–µ /start –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã."
        ]
        
        import random
        selected_message = random.choice(creative_messages)
        
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å /start
        from aiogram.types import ReplyKeyboardRemove
        await message.answer(
            selected_message,
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="Markdown"
        )
    
    async def block_declined_user(self, message: types.Message, state: FSMContext) -> None:
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–∫–∞–∑–∞–≤—à–µ–≥–æ—Å—è –æ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"""
        from aiogram.types import ReplyKeyboardRemove
        
        await message.answer(
            "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º.",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="Markdown"
        )


def setup_global_commands(dispatcher) -> GlobalCommandsHandler:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    handler = GlobalCommandsHandler()
    handler.setup(dispatcher)
    return handler
