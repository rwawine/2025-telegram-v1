"""–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ fallback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

from __future__ import annotations

import random
from typing import Dict, Any

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from bot.context_manager import get_context_manager, UserContext, UserAction
from bot.keyboards import (
    get_main_menu_keyboard_for_user,
    get_support_menu_keyboard,
    get_name_input_keyboard,
    get_phone_input_keyboard,
    get_loyalty_card_keyboard,
    get_photo_upload_keyboard
)


class SmartFallbackHandler:
    """–£–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self):
        self.router = Router()
        self._register_handlers()
    
    def setup(self, dispatcher) -> None:
        # –í aiogram 3.x –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ include_router
        dispatcher.include_router(self.router)
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        self.router.message.register(
            self.handle_unexpected_text,
            F.text,
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        self.router.message.register(
            self.handle_unexpected_sticker,
            F.sticker,
        )
        
        self.router.message.register(
            self.handle_unexpected_voice,
            F.voice | F.video_note,
        )
        
        self.router.message.register(
            self.handle_unexpected_media,
            F.video | F.audio | F.animation | F.document,
        )
        
        self.router.message.register(
            self.handle_unexpected_photo,
            F.photo,
        )
        
        self.router.message.register(
            self.handle_unexpected_contact,
            F.contact,
        )
        
        self.router.message.register(
            self.handle_unexpected_location,
            F.location | F.venue,
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback queries
        self.router.callback_query.register(
            self.handle_unknown_callback,
        )
    
    async def handle_unexpected_text(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # CRITICAL: Check if user is in a registration state - if so, skip this handler
        # Registration handlers should process the message instead
        current_state = await state.get_state()
        if current_state:
            # User is in some FSM state - let the state handlers process it
            # This fallback should ONLY trigger when user has NO active state
            return
        
        from bot.context_manager import get_context_manager
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.update_context(
                message.from_user.id, 
                UserContext.CONFUSED, 
                UserAction.TEXT_INPUT
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Ç–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_confused = False
        context_manager = get_context_manager()
        if context_manager:
            try:
                is_confused = await context_manager.detect_user_confusion(message.from_user.id, message, state)
            except Exception:
                is_confused = False
        
        if is_confused:
            await self._handle_confused_user(message, state)
        else:
            await self._provide_contextual_help(message, state)
    
    async def handle_unexpected_sticker(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö"""
        # Check if user is in active FSM state - skip if so
        current_state = await state.get_state()
        if current_state:
            return
            
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.increment_error_count(message.from_user.id)
            witty_responses = context_manager.get_witty_responses()["sticker_in_registration"]
            response = random.choice(witty_responses)
        else:
            response = "üòä –°—Ç–∏–∫–µ—Ä –ø—Ä–∏–Ω—è—Ç! –ù–æ —Å–µ–π—á–∞—Å –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ."
        
        await message.answer(response)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø–æ–º–æ—â—å
        await self._provide_contextual_help(message, state, is_media_error=True)
    
    async def handle_unexpected_voice(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # Check if user is in active FSM state - skip if so
        current_state = await state.get_state()
        if current_state:
            return
            
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.increment_error_count(message.from_user.id)
            witty_responses = context_manager.get_witty_responses()["voice_unexpected"]
            response = random.choice(witty_responses)
        else:
            response = "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ù–æ —Å–µ–π—á–∞—Å –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç."
        
        await message.answer(response)
        await self._provide_contextual_help(message, state, is_media_error=True)
    
    async def handle_unexpected_media(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # Check if user is in active FSM state - skip if so
        current_state = await state.get_state()
        if current_state:
            return
            
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.increment_error_count(message.from_user.id)
        
        content_type_map = {
            'video': '–≤–∏–¥–µ–æ üé•',
            'audio': '–∞—É–¥–∏–æ üéµ', 
            'animation': 'GIF üé¨',
            'document': '–¥–æ–∫—É–º–µ–Ω—Ç üìÑ'
        }
        
        content_type = None
        for msg_type, display_name in content_type_map.items():
            if hasattr(message, msg_type) and getattr(message, msg_type):
                content_type = display_name
                break
        
        if not content_type:
            content_type = "–º–µ–¥–∏–∞ üìé"
        
        await message.answer(
            f"üìé {content_type} –ø–æ–ª—É—á–µ–Ω! –ù–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–Ω–µ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.\n\n"
            f"üéØ –î–∞–≤–∞–π—Ç–µ —è –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ —Å–µ–π—á–∞—Å –ª—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:"
        )
        
        await self._provide_contextual_help(message, state, is_media_error=True)
    
    async def handle_unexpected_photo(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö"""
        current_state = await state.get_state()
        
        # –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç registration handler
        if current_state and "upload_photo" in current_state:
            return
        
        # –ï—Å–ª–∏ –º—ã –ù–ï –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ, —Ç–æ —ç—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ
        if current_state:
            context_manager = get_context_manager()
            if context_manager:
                await context_manager.increment_error_count(message.from_user.id)
            
            await message.answer(
                "üì∏ –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ! –ù–æ —Å–µ–π—á–∞—Å –æ–Ω–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞.\n\n"
                "üîÑ –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:"
            )
            
            await self._provide_contextual_help(message, state, is_media_error=True)
    
    async def handle_unexpected_contact(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö"""
        current_state = await state.get_state()
        
        # –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç registration handler
        if current_state and "enter_phone" in current_state:
            return
        
        if current_state:
            context_manager = get_context_manager()
            if context_manager:
                await context_manager.increment_error_count(message.from_user.id)
            
            await message.answer(
                "üì± –°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç! –ù–æ —Å–µ–π—á–∞—Å –æ–Ω –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–º —ç—Ç–∞–ø–µ.\n\n"
                "üß≠ –ü–æ–∑–≤–æ–ª—å—Ç–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤–∞—Å:"
            )
            
            await self._provide_contextual_help(message, state, is_media_error=True)
    
    async def handle_unexpected_location(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        # Check if user is in active FSM state - skip if so
        current_state = await state.get_state()
        if current_state:
            return
            
        await message.answer(
            "üó∫Ô∏è –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Å—Ç–æ! –ù–æ –¥–ª—è –Ω–∞—à–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞.\n\n"
            "üéØ –î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É:"
        )
        
        keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)
    
    async def handle_unknown_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        await callback.answer(
            "ü§ñ –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            show_alert=True
        )
    
    async def _handle_confused_user(self, message: types.Message, state: FSMContext):
        """–ü–æ–º–æ—â—å –∑–∞–ø—É—Ç–∞–≤—à–µ–º—É—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        
        context_manager = get_context_manager()
        if context_manager:
            confusion_responses = context_manager.get_witty_responses()["confusion_general"]
            response = random.choice(confusion_responses)
        else:
            response = "ü§î –ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞!"
        
        await message.answer(f"{response}\n\nüöÄ **–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫:**")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        quick_nav = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="quick_nav_main"),
                InlineKeyboardButton(text="üöÄ –ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="quick_nav_register")
            ],
            [
                InlineKeyboardButton(text="üí¨ –í –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="quick_nav_support"),
                InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="quick_nav_help")
            ]
        ])
        
        await message.answer(
            "üéØ **–ö—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏–º—Å—è?**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=quick_nav
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self._register_quick_nav_handlers()
    
    async def _provide_contextual_help(self, message: types.Message, state: FSMContext, is_media_error: bool = False):
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–æ–º–æ—â–∏ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from database.repositories import get_participant_status
        user_status = await get_participant_status(message.from_user.id)
        
        # –î–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if user_status is None:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            await message.answer(
                "üöÄ **–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!**\n\n"
                "üéØ –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω—É–∂–Ω–æ:\n"
                "1Ô∏è‚É£ –ù–∞–∂–∞—Ç—å **¬´–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é¬ª**\n"
                "2Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –∫–∞—Ä—Ç–∞)\n"
                "3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞\n\n"
                "‚ö° –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 2-3 –º–∏–Ω—É—Ç—ã!",
                parse_mode="Markdown"
            )
        elif user_status == "rejected":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω
            await message.answer(
                "‚ùå **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n"
                "üí¨ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:**\n"
                "üîÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏\n"
                "üí≠ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π\n\n"
                "üìû **–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç** –≤—ã—è—Å–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏ –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É!",
                parse_mode="Markdown"
            )
        elif user_status == "pending":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            await message.answer(
                "‚è≥ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏**\n\n"
                "‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è\n"
                "üîî –ú—ã —É–≤–µ–¥–æ–º–∏–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ\n"
                "üìã –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ **¬´–ú–æ–π —Å—Ç–∞—Ç—É—Å¬ª**\n\n"
                "üí¨ –í–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É!",
                parse_mode="Markdown"
            )
        elif user_status == "approved":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω
            await message.answer(
                "üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!**\n\n"
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞\n"
                "üéÅ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n"
                "üìã –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ **¬´–û —Ä–æ–∑—ã–≥—Ä—ã—à–µ¬ª**\n\n"
                "üí¨ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–∂–µ—Ç!",
                parse_mode="Markdown"
            )
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å - fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
            suggestion = None
            context_manager = get_context_manager()
            if context_manager:
                try:
                    suggestion = await context_manager.get_smart_suggestion(message.from_user.id, message, state)
                except (AttributeError, Exception):
                    suggestion = None
            
            if suggestion:
                help_text = f"üí° **{suggestion['message']}**"
                if 'next_step_hint' in suggestion:
                    help_text += f"\n\nüîÆ **–ß—Ç–æ –¥–∞–ª—å—à–µ:** {suggestion['next_step_hint']}"
                await message.answer(help_text)
            else:
                await message.answer(
                    "ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å.\n\n"
                    "üè† –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
                )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    
    def _register_quick_nav_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        
        @self.router.callback_query(F.data == "quick_nav_main")
        async def nav_to_main(callback: types.CallbackQuery, state: FSMContext):
            await state.clear()
            keyboard = await get_main_menu_keyboard_for_user(callback.from_user.id)
            await callback.message.edit_text(
                "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
                reply_markup=keyboard
            )
            await callback.answer()
        
        @self.router.callback_query(F.data == "quick_nav_register") 
        async def nav_to_register(callback: types.CallbackQuery, state: FSMContext):
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            from bot.states import RegistrationStates
            await state.set_state(RegistrationStates.enter_name)
            await callback.message.edit_text(
                "üöÄ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ).\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
            )
            await callback.message.answer(
                "üëÜ –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
                reply_markup=get_name_input_keyboard()
            )
            await callback.answer()
        
        @self.router.callback_query(F.data == "quick_nav_support")
        async def nav_to_support(callback: types.CallbackQuery, state: FSMContext):
            await state.clear()
            await callback.message.edit_text(
                "üí¨ **–¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
            )
            await callback.message.answer(
                "–ß–µ–º –º–æ–∂–µ–º –ø–æ–º–æ—á—å?",
                reply_markup=get_support_menu_keyboard()
            )
            await callback.answer()
        
        @self.router.callback_query(F.data == "quick_nav_help")
        async def nav_to_help(callback: types.CallbackQuery):
            help_text = (
                "‚ùì **–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞**\n\n"
                "üöÄ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è** - –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n"
                "üìã **–ú–æ–π —Å—Ç–∞—Ç—É—Å** - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏\n" 
                "üí¨ **–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞** - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ\n"
                "üìä **–û —Ä–æ–∑—ã–≥—Ä—ã—à–µ** - –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–∏–∑—ã –∏ —Å—Ä–æ–∫–∏\n\n"
                "üéØ **–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–Ω–æ:**\n"
                "1Ô∏è‚É£ –ü–æ–ª–Ω–æ–µ –∏–º—è\n"
                "2Ô∏è‚É£ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "3Ô∏è‚É£ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\n"
                "4Ô∏è‚É£ –§–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞"
            )
            
            await callback.message.edit_text(help_text)
            await callback.answer()


def setup_fallback_handlers(dispatcher) -> SmartFallbackHandler:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    handler = SmartFallbackHandler()
    handler.setup(dispatcher)
    return handler
