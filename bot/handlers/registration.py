"""Registration handlers with batching for database writes."""

from __future__ import annotations

import asyncio
import uuid
from contextlib import suppress
from pathlib import Path
from typing import Any, Dict, List

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from bot.states import RegistrationStates
from database.repositories import get_participant_status, insert_participants_batch
from utils.validators import validate_full_name, validate_phone, validate_loyalty_card
from bot.keyboards import (
    get_main_menu_keyboard_for_user,
    get_name_input_keyboard,
    get_phone_input_keyboard,
    get_loyalty_card_keyboard,
    get_photo_upload_keyboard,
    get_status_keyboard,
)
from bot.context_manager import UserContext, UserAction
from bot.messages import smart_messages

BATCH_SIZE = 25
BATCH_TIMEOUT = 0.5


class RegistrationHandler:
    def __init__(self, upload_dir: Path, cache, bot) -> None:
        self.router = Router()
        self.batch: List[Dict[str, Any]] = []
        self.lock = asyncio.Lock()
        self.flush_task = asyncio.create_task(self._periodic_flush())
        self.upload_dir = upload_dir
        self.cache = cache
        self.bot = bot
        self._register_handlers()

    def setup(self, dispatcher) -> None:
        dispatcher.include_router(self.router)
        dispatcher.shutdown.register(self.shutdown)

    def _register_handlers(self) -> None:
        # Entry points and main actions
        self.router.message.register(self.start_registration, F.text.contains("—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü"))
        self.router.message.register(self.start_registration, F.text == "üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        self.router.message.register(self.start_registration, F.text == "üîÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞")
        self.router.message.register(self.handle_status, F.text.contains("—Å—Ç–∞—Ç—É—Å"))
        self.router.message.register(self.back_to_menu, F.text.contains("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

        # Navigation within flow (should run before field validation handlers)
        self.router.message.register(self.back_to_menu, F.text.contains("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
        self.router.message.register(self.back_to_name, F.text.contains("–ù–∞–∑–∞–¥ –∫ –∏–º–µ–Ω–∏"))
        self.router.message.register(self.back_to_phone, F.text.contains("–ù–∞–∑–∞–¥ –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É"))
        self.router.message.register(self.back_to_card, F.text.contains("–ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–µ"))
        self.router.message.register(self.ask_take_photo, RegistrationStates.upload_photo, F.text.contains("–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ"))
        self.router.message.register(self.ask_choose_gallery, RegistrationStates.upload_photo, F.text.contains("–≥–∞–ª–µ—Ä–µ"))
        self.router.message.register(self.explain_leaflet, F.text.contains("–ª–∏—Ñ–ª–µ—Ç"))

        # Content-type aware guards (must be before main state handlers)
        # Name step: block non-text and premature phone/contact
        self.router.message.register(self.name_unexpected_contact, RegistrationStates.enter_name, F.contact)
        self.router.message.register(self.name_unexpected_photo, RegistrationStates.enter_name, F.photo)
        self.router.message.register(self.name_unexpected_document, RegistrationStates.enter_name, F.document)
        self.router.message.register(self.name_unexpected_sticker, RegistrationStates.enter_name, F.sticker)
        self.router.message.register(self.name_unexpected_media, RegistrationStates.enter_name, F.video)
        self.router.message.register(self.name_unexpected_media, RegistrationStates.enter_name, F.voice)
        self.router.message.register(self.name_unexpected_media, RegistrationStates.enter_name, F.audio)
        self.router.message.register(self.name_unexpected_media, RegistrationStates.enter_name, F.location)

        # Phone step: block irrelevant content (contact is handled separately below)
        self.router.message.register(self.phone_unexpected_photo, RegistrationStates.enter_phone, F.photo)
        self.router.message.register(self.phone_unexpected_document, RegistrationStates.enter_phone, F.document)
        self.router.message.register(self.phone_unexpected_sticker, RegistrationStates.enter_phone, F.sticker)
        self.router.message.register(self.phone_unexpected_media, RegistrationStates.enter_phone, F.video)
        self.router.message.register(self.phone_unexpected_media, RegistrationStates.enter_phone, F.voice)
        self.router.message.register(self.phone_unexpected_media, RegistrationStates.enter_phone, F.audio)
        self.router.message.register(self.phone_unexpected_media, RegistrationStates.enter_phone, F.location)

        # Loyalty card step: block non-text
        self.router.message.register(self.card_unexpected_photo, RegistrationStates.enter_loyalty_card, F.photo)
        self.router.message.register(self.card_unexpected_document, RegistrationStates.enter_loyalty_card, F.document)
        self.router.message.register(self.card_unexpected_sticker, RegistrationStates.enter_loyalty_card, F.sticker)
        self.router.message.register(self.card_unexpected_media, RegistrationStates.enter_loyalty_card, F.video)
        self.router.message.register(self.card_unexpected_media, RegistrationStates.enter_loyalty_card, F.voice)
        self.router.message.register(self.card_unexpected_media, RegistrationStates.enter_loyalty_card, F.audio)
        self.router.message.register(self.card_unexpected_media, RegistrationStates.enter_loyalty_card, F.location)

        # Photo step: block text and non-photo content
        self.router.message.register(self.photo_unexpected_text, RegistrationStates.upload_photo, F.text)
        self.router.message.register(self.photo_unexpected_document, RegistrationStates.upload_photo, F.document)
        self.router.message.register(self.photo_unexpected_sticker, RegistrationStates.upload_photo, F.sticker)
        self.router.message.register(self.photo_unexpected_media, RegistrationStates.upload_photo, F.video)
        self.router.message.register(self.photo_unexpected_media, RegistrationStates.upload_photo, F.voice)
        self.router.message.register(self.photo_unexpected_media, RegistrationStates.upload_photo, F.audio)
        self.router.message.register(self.photo_unexpected_media, RegistrationStates.upload_photo, F.location)

        # Registration flow
        self.router.message.register(self.enter_name, RegistrationStates.enter_name)
        self.router.message.register(self.enter_phone, RegistrationStates.enter_phone)
        self.router.message.register(self.enter_loyalty_card, RegistrationStates.enter_loyalty_card)
        self.router.message.register(self.upload_photo, RegistrationStates.upload_photo, F.photo)

        # Special inputs
        self.router.message.register(self.handle_contact, RegistrationStates.enter_phone, F.contact)

    async def start_registration(self, message: types.Message, state: FSMContext) -> None:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from bot.context_manager import get_context_manager
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.update_context(
                message.from_user.id,
                UserContext.REGISTRATION,
                UserAction.BUTTON_CLICK
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —É–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        reg_messages = smart_messages.get_registration_messages()
        name_msg = reg_messages["start_name"]
        
        await message.answer(
            smart_messages.format_message_with_progress(name_msg["text"], 1),
            reply_markup=get_name_input_keyboard(),
            parse_mode="Markdown"
        )
        await state.set_state(RegistrationStates.enter_name)

    async def enter_name(self, message: types.Message, state: FSMContext) -> None:
        full_name = message.text or ""
        
        from bot.context_manager import get_context_manager
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.update_context(
                message.from_user.id,
                UserContext.REGISTRATION,
                UserAction.TEXT_INPUT
            )
        
        # If user sends a phone number as name, guide them
        if validate_phone(full_name):
            if context_manager:
                await context_manager.increment_error_count(message.from_user.id)
            await message.answer(
                "üì± **–≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!**\n\n"
                "üéØ –°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –≤–∞—à–µ **–ø–æ–ª–Ω–æ–µ –∏–º—è**\n"
                "–¢–µ–ª–µ—Ñ–æ–Ω –≤—ã —É–∫–∞–∂–µ—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ\n\n"
                "‚úÖ **–ù–∞–ø—Ä–∏–º–µ—Ä:** –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
                reply_markup=get_name_input_keyboard(),
                parse_mode="Markdown"
            )
            return
            
        if not validate_full_name(full_name):
            if context_manager:
                await context_manager.increment_error_count(message.from_user.id)
            error_messages = smart_messages.get_error_messages()
            error_msg = error_messages["name_invalid"]
            
            await message.answer(
                error_msg["text"],
                reply_markup=get_name_input_keyboard(),
                parse_mode="Markdown"
            )
            return
            
        # –£—Å–ø–µ—à–Ω—ã–π –≤–≤–æ–¥ –∏–º–µ–Ω–∏
        await state.update_data(full_name=full_name)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º
        reg_messages = smart_messages.get_registration_messages()
        success_msg = reg_messages["name_success"]["text"].format(name=full_name.split()[0])
        
        await message.answer(success_msg, parse_mode="Markdown")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await state.set_state(RegistrationStates.enter_phone)
        phone_msg = reg_messages["start_phone"]
        
        await message.answer(
            smart_messages.format_message_with_progress(phone_msg["text"], 2),
            reply_markup=get_phone_input_keyboard(),
            parse_mode="Markdown"
        )

    async def enter_phone(self, message: types.Message, state: FSMContext) -> None:
        phone_number = message.text or ""
        if message.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX",
                reply_markup=get_phone_input_keyboard(),
            )
            return
        if not validate_phone(phone_number):
            await message.answer(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +79001234567.\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä¬ª.",
                reply_markup=get_phone_input_keyboard(),
            )
            return
        await state.update_data(phone_number=phone_number)
        await state.set_state(RegistrationStates.enter_loyalty_card)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, 6‚Äì20 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: ABC12345",
            reply_markup=get_loyalty_card_keyboard(),
        )

    async def enter_loyalty_card(self, message: types.Message, state: FSMContext) -> None:
        loyalty_card = message.text or ""
        if not validate_loyalty_card(loyalty_card):
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (6‚Äì20 —Å–∏–º–≤–æ–ª–æ–≤).\n"
                "–ü—Ä–∏–º–µ—Ä: ABC12345",
                reply_markup=get_loyalty_card_keyboard(),
            )
            return
        await state.update_data(loyalty_card=loyalty_card)
        await state.set_state(RegistrationStates.upload_photo)
        await message.answer(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
            "–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´üì∑ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª –∏–ª–∏ ¬´üñºÔ∏è –í—ã–±—Ä–∞—Ç—å –∏–∑ –≥–∞–ª–µ—Ä–µ–∏¬ª.",
            reply_markup=get_photo_upload_keyboard(),
        )

    async def upload_photo(self, message: types.Message, state: FSMContext) -> None:
        data = await state.get_data()
        file_id = message.photo[-1].file_id if message.photo else None
        await state.clear()

        record = {
            "telegram_id": message.from_user.id,
            "username": message.from_user.username,
            "full_name": data.get("full_name"),
            "phone_number": data.get("phone_number"),
            "loyalty_card": data.get("loyalty_card"),
            "photo_path": await self._download_photo(file_id) if file_id else None,
        }

        await self._enqueue_record(record)
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
            "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ.",
            reply_markup=get_status_keyboard(),
        )

    async def handle_status(self, message: types.Message) -> None:
        from bot.context_manager import get_context_manager, UserContext, UserAction
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.update_context(
                message.from_user.id,
                UserContext.NAVIGATION,
                UserAction.BUTTON_CLICK
            )
        
        async def loader():
            return await get_participant_status(message.from_user.id)

        status = await self.cache.get_or_set(
            key=f"status:{message.from_user.id}",
            loader=loader,
            level="hot",
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —É–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        if status is None:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            await message.answer(
                "üìù **–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã**\n\n"
                "üöÄ –ù–∞–∂–º–∏—Ç–µ **–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é** —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\n\n"
                "‚ö° –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 2-3 –º–∏–Ω—É—Ç—ã",
                reply_markup=get_status_keyboard(),
                parse_mode="Markdown"
            )
        else:
            # –ü–æ–ª—É—á–∞–µ–º —É–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            username = message.from_user.first_name or "–£—á–∞—Å—Ç–Ω–∏–∫"
            status_msg = smart_messages.get_status_message(status, username)
            
            await message.answer(
                status_msg["text"],
                reply_markup=get_status_keyboard(),
                parse_mode="Markdown"
            )

    # Auxiliary handlers
    async def handle_contact(self, message: types.Message, state: FSMContext) -> None:
        try:
            phone = message.contact.phone_number
        except Exception:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é", reply_markup=get_phone_input_keyboard())
            return
        await state.update_data(phone_number=phone)
        await state.set_state(RegistrationStates.enter_loyalty_card)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", reply_markup=get_loyalty_card_keyboard())

    async def back_to_menu(self, message: types.Message, state: FSMContext) -> None:
        await state.clear()
        keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)

    async def back_to_name(self, message: types.Message, state: FSMContext) -> None:
        await state.set_state(RegistrationStates.enter_name)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ). –ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
            reply_markup=get_name_input_keyboard(),
        )

    async def back_to_phone(self, message: types.Message, state: FSMContext) -> None:
        await state.set_state(RegistrationStates.enter_phone)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä¬ª",
            reply_markup=get_phone_input_keyboard(),
        )

    async def back_to_card(self, message: types.Message, state: FSMContext) -> None:
        await state.set_state(RegistrationStates.enter_loyalty_card)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, 6‚Äì20 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: ABC12345",
            reply_markup=get_loyalty_card_keyboard(),
        )

    # ========== Content-type guards implementations ==========
    # Name step guards
    async def name_unexpected_contact(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–ù–∞ —ç—Ç–æ–º —à–∞–≥–µ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º. –¢–µ–ª–µ—Ñ–æ–Ω –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.",
            reply_markup=get_name_input_keyboard(),
        )

    async def name_unexpected_photo(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —Å–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
            reply_markup=get_name_input_keyboard(),
        )

    async def name_unexpected_document(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ —Ñ–∞–π–ª–æ–≤.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
            reply_markup=get_name_input_keyboard(),
        )

    async def name_unexpected_sticker(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–°—Ç–∏–∫–µ—Ä ‚Äî —ç—Ç–æ –º–∏–ª–æ üòä –ù–æ —Å–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º.",
            reply_markup=get_name_input_keyboard(),
        )

    async def name_unexpected_media(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
            reply_markup=get_name_input_keyboard(),
        )

    # Phone step guards (contact handled separately)
    async def phone_unexpected_photo(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–°–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä¬ª.",
            reply_markup=get_phone_input_keyboard(),
        )

    async def phone_unexpected_document(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä¬ª.",
            reply_markup=get_phone_input_keyboard(),
        )

    async def phone_unexpected_sticker(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–°—Ç–∏–∫–µ—Ä –ø—Ä–∏–Ω—è—Ç üòä –ù–æ –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +79001234567",
            reply_markup=get_phone_input_keyboard(),
        )

    async def phone_unexpected_media(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º. –ü—Ä–∏–º–µ—Ä: +79001234567",
            reply_markup=get_phone_input_keyboard(),
        )

    # Loyalty card step guards
    async def card_unexpected_photo(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–°–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º. –ü—Ä–∏–º–µ—Ä: ABC12345",
            reply_markup=get_loyalty_card_keyboard(),
        )

    async def card_unexpected_document(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Ç–µ–∫—Å—Ç–æ–º. –ü—Ä–∏–º–µ—Ä: ABC12345",
            reply_markup=get_loyalty_card_keyboard(),
        )

    async def card_unexpected_sticker(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–°—Ç–∏–∫–µ—Ä ‚Äî —ç—Ç–æ –∫–ª–∞—Å—Å–Ω–æ üòä –ù–æ –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –ü—Ä–∏–º–µ—Ä: ABC12345",
            reply_markup=get_loyalty_card_keyboard(),
        )

    async def card_unexpected_media(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Ç–µ–∫—Å—Ç–æ–º. –ü—Ä–∏–º–µ—Ä: ABC12345",
            reply_markup=get_loyalty_card_keyboard(),
        )

    # Photo step guards
    async def photo_unexpected_text(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–ù–∞ —ç—Ç–æ–º —à–∞–≥–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞.\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´üì∑ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ª –∏–ª–∏ ¬´üñºÔ∏è –í—ã–±—Ä–∞—Ç—å –∏–∑ –≥–∞–ª–µ—Ä–µ–∏¬ª, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=get_photo_upload_keyboard(),
        )

    async def photo_unexpected_document(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ (–Ω–µ —Ñ–∞–π–ª/–¥–æ–∫—É–º–µ–Ω—Ç).",
            reply_markup=get_photo_upload_keyboard(),
        )

    async def photo_unexpected_sticker(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–°—Ç–∏–∫–µ—Ä –Ω–µ –ø–æ–¥–æ–π–¥—ë—Ç üòä –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞.",
            reply_markup=get_photo_upload_keyboard(),
        )

    async def photo_unexpected_media(self, message: types.Message, state: FSMContext) -> None:
        await message.answer(
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=get_photo_upload_keyboard(),
        )

    async def ask_take_photo(self, message: types.Message, state: FSMContext) -> None:
        await message.answer("–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç", reply_markup=get_photo_upload_keyboard())

    async def ask_choose_gallery(self, message: types.Message, state: FSMContext) -> None:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –≤ –≥–∞–ª–µ—Ä–µ–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞", reply_markup=get_photo_upload_keyboard())

    async def explain_leaflet(self, message: types.Message) -> None:
        await message.answer("–õ–∏—Ñ–ª–µ—Ç ‚Äî –ø—Ä–æ–º–æ-–º–∞—Ç–µ—Ä–∏–∞–ª. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ª–∏—Å—Ç–æ–≤–∫–∏/–±–∞–Ω–Ω–µ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")

    async def _enqueue_record(self, record: Dict[str, Any]) -> None:
        async with self.lock:
            self.batch.append(record)
            if len(self.batch) >= BATCH_SIZE:
                await self._flush()

    async def _flush(self) -> None:
        if not self.batch:
            return
        async with self.lock:
            batch = self.batch[:]
            self.batch.clear()

        await insert_participants_batch(batch)
        for record in batch:
            self.cache.invalidate(f"status:{record['telegram_id']}")

    async def _download_photo(self, file_id: str) -> str | None:
        try:
            self.upload_dir.mkdir(parents=True, exist_ok=True)
            filename = f"{uuid.uuid4().hex}.jpg"
            destination = self.upload_dir / filename
            await self.bot.download(file_id, destination=str(destination))
            return destination.as_posix()
        except Exception:
            return None

    async def _periodic_flush(self) -> None:
        while True:
            await asyncio.sleep(BATCH_TIMEOUT)
            await self._flush()

    async def shutdown(self) -> None:
        self.flush_task.cancel()
        with suppress(asyncio.CancelledError):
            await self.flush_task
        await self._flush()


def setup_registration_handlers(dispatcher, *, upload_dir: Path, cache, bot) -> RegistrationHandler:
    handler = RegistrationHandler(upload_dir=upload_dir, cache=cache, bot=bot)
    handler.setup(dispatcher)
    return handler

