"""–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ fallback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π FSM."""

from __future__ import annotations

import random
from typing import Dict, Any

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from bot.context_manager import get_context_manager, UserContext, UserAction
from bot.states import RegistrationStates
from bot.keyboards import (
    get_main_menu_keyboard_for_user,
    get_support_menu_keyboard,
    get_name_input_keyboard,
    get_phone_input_keyboard,
    get_loyalty_card_keyboard,
    get_photo_upload_keyboard
)


class FixedSmartFallbackHandler:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —É–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π FSM"""
    
    def __init__(self):
        self.router = Router()
        self.router.name = "smart_fallback"
        self._register_handlers()
        self._register_quick_nav_handlers()  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
    
    def setup(self, dispatcher) -> None:
        # Fallback handlers –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ (—Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        dispatcher.include_router(self.router)
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º —Ä–∞–Ω–Ω–µ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è!
        # –¢–µ–ø–µ—Ä—å fallback handlers —Ä–∞–±–æ—Ç–∞—é—Ç –∏ –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        # –ò–°–ö–õ–Æ–ß–ê–ï–ú –í–°–ï FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        self.router.message.register(
            self.handle_unexpected_text,
            F.text,
            ~StateFilter(RegistrationStates.enter_name),
            ~StateFilter(RegistrationStates.enter_phone),
            ~StateFilter(RegistrationStates.enter_loyalty_card),
            ~StateFilter(RegistrationStates.upload_photo),
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.router.message.register(
            self.handle_unexpected_sticker,
            F.sticker,
        )
        
        self.router.message.register(
            self.handle_unexpected_voice,
            F.voice | F.video_note,
        )
        
        self.router.message.register(
            self.handle_unexpected_media,
            F.video | F.audio | F.animation | F.document,
        )
        
        self.router.message.register(
            self.handle_unexpected_photo,
            F.photo,
            ~StateFilter(RegistrationStates.upload_photo),  # –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ upload_photo
        )
        
        self.router.message.register(
            self.handle_unexpected_contact,
            F.contact,
            ~StateFilter(RegistrationStates.enter_phone),  # –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ enter_phone
        )
        
        self.router.message.register(
            self.handle_unexpected_location,
            F.location | F.venue,
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback queries
        self.router.callback_query.register(
            self.handle_unknown_callback,
        )
    
    async def handle_unexpected_text(self, message: types.Message, state: FSMContext):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        current_state = await state.get_state()
        context_manager = get_context_manager()
        
        # –í–ê–ñ–ù–û: –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏!
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–æ—Ç–∞–ª –ª–∏ –∫—Ç–æ-—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–≤–æ–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        
        if context_manager:
            await context_manager.update_context(
                message.from_user.id, 
                UserContext.CONFUSED if current_state else UserContext.NAVIGATION,
                UserAction.TEXT_INPUT
            )
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–º–æ–≥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ
        if current_state:
            await self._provide_fsm_help(message, state, current_state)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å
            is_confused = False
            if context_manager:
                try:
                    is_confused = await context_manager.detect_user_confusion(message.from_user.id, message, state)
                except Exception:
                    is_confused = False
            
            if is_confused:
                await self._handle_confused_user(message, state)
            else:
                # –ü—Ä–æ—Å—Ç–æ–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                await message.answer(
                    "ü§î **–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.**\n\n"
                    "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                    "üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å\n"
                    "üìä –£–∑–Ω–∞—Ç—å –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n"
                    "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n"
                    "üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ:",
                    parse_mode="Markdown"
                )
                keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    
    async def _provide_fsm_help(self, message: types.Message, state: FSMContext, current_state: str):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–æ–º–æ—â—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö"""
        
        state_help_map = {
            "RegistrationStates:enter_name": {
                "message": "üìù **–°–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∏–º—è**\n\n"
                          "‚úÖ **–ü—Ä–∏–º–µ—Ä—ã:**\n"
                          "‚Ä¢ –ê–ª–µ–∫—Å–µ–π\n"
                          "‚Ä¢ –ê–Ω–Ω–∞-–ú–∞—Ä–∏—è\n"
                          "‚Ä¢ –ñ–∞–Ω-–ü–æ–ª—å\n"
                          "‚Ä¢ –û'–ö–æ–Ω–Ω–æ—Ä\n\n"
                          "‚ùå **–ò–∑–±–µ–≥–∞–π—Ç–µ:** —Ñ–∞–º–∏–ª–∏–π, –æ—Ç—á–µ—Å—Ç–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤\n\n"
                          "üí° *–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –≤–∞—à–µ –∏–º—è*",
                "keyboard": get_name_input_keyboard(),
                "wrong_content_hints": {
                    "phone": "üì± –¢–µ–ª–µ—Ñ–æ–Ω –≤—ã —É–∫–∞–∂–µ—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ!",
                    "photo": "üì∏ –§–æ—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!",
                    "contact": "üìû –ö–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞!"
                }
            },
            "RegistrationStates:enter_phone": {
                "message": "üì± **–°–µ–π—á–∞—Å –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞**\n\n"
                          "‚úÖ **–î–≤–∞ —Å–ø–æ—Å–æ–±–∞:**\n"
                          "‚Ä¢ –ù–∞–∂–∞—Ç—å **üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä**\n"
                          "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ **+79001234567**\n\n"
                          "üí° *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä*",
                "keyboard": get_phone_input_keyboard(),
                "wrong_content_hints": {
                    "name": "‚úÖ –ò–º—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç–µ–ª–µ—Ñ–æ–Ω.",
                    "photo": "üì∏ –§–æ—Ç–æ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º —à–∞–≥–æ–º!"
                }
            },
            "RegistrationStates:enter_loyalty_card": {
                "message": "üí≥ **–°–µ–π—á–∞—Å –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏**\n\n"
                          "‚úÖ **–§–æ—Ä–º–∞—Ç:** —Ä–æ–≤–Ω–æ 16 —Ü–∏—Ñ—Ä\n"
                          "‚úÖ **–ì–¥–µ –Ω–∞–π—Ç–∏:** –Ω–∞ –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –∫–∞—Ä—Ç—ã\n"
                          "‚úÖ **–ü—Ä–∏–º–µ—Ä:** 1234567890123456\n\n"
                          "üí° *–ù–∞–π–¥–∏—Ç–µ –∫–∞—Ä—Ç—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –∫–æ—à–µ–ª—å–∫–µ*",
                "keyboard": get_loyalty_card_keyboard()
            },
            "RegistrationStates:upload_photo": {
                "message": "üì∏ **–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - —Ñ–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞!**\n\n"
                          "üé® **–õ–∏—Ñ–ª–µ—Ç** = —Ä–µ–∫–ª–∞–º–Ω–∞—è –ª–∏—Å—Ç–æ–≤–∫–∞/–±–∞–Ω–Ω–µ—Ä\n\n"
                          "‚úÖ **–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:**\n"
                          "‚Ä¢ –ù–∞–∂–∞—Ç—å **üì∑ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ**\n"
                          "‚Ä¢ –ù–∞–∂–∞—Ç—å **üñºÔ∏è –í—ã–±—Ä–∞—Ç—å –∏–∑ –≥–∞–ª–µ—Ä–µ–∏**\n"
                          "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n\n"
                          "üí° *–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–∏–º –∏ —á–∏—Ç–∞–µ–º—ã–º*",
                "keyboard": get_photo_upload_keyboard()
            },
            "SupportStates:entering_message": {
                "message": "üí¨ **–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É**\n\n"
                          "‚úÖ **–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:**\n"
                          "‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?\n"
                          "‚Ä¢ –ù–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ?\n"
                          "‚Ä¢ –ö–∞–∫–∏–µ –æ—à–∏–±–∫–∏ –≤–∏–¥–∏—Ç–µ?\n\n"
                          "üìé *–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç*",
                "keyboard": None  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑ support handler
            }
        }
        
        help_info = state_help_map.get(current_state)
        if not help_info:
            # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            await message.answer(
                f"ü§î **–ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Å–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å**\n\n"
                f"üìç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: `{current_state}`\n\n"
                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ `/cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
                f"‚Ä¢ `/start` - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
                f"‚Ä¢ `/help` - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å",
                parse_mode="Markdown"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –¥–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
        content_hint = ""
        if message.photo:
            content_hint = help_info.get("wrong_content_hints", {}).get("photo", "")
        elif message.contact:
            content_hint = help_info.get("wrong_content_hints", {}).get("contact", "")
        elif self._looks_like_phone(message.text):
            content_hint = help_info.get("wrong_content_hints", {}).get("phone", "")
        elif self._looks_like_name(message.text) and "phone" in current_state:
            content_hint = help_info.get("wrong_content_hints", {}).get("name", "")
        
        response = help_info["message"]
        if content_hint:
            response = f"{content_hint}\n\n{response}"
        
        await message.answer(
            response,
            reply_markup=help_info["keyboard"],
            parse_mode="Markdown"
        )
    
    def _looks_like_phone(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        if not text:
            return False
        clean_text = ''.join(c for c in text if c.isdigit() or c == '+')
        return len(clean_text) >= 10 and (clean_text.startswith('+') or clean_text.startswith('7') or clean_text.startswith('8'))
    
    def _looks_like_name(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∏–º—è"""
        if not text:
            return False
        words = text.split()
        return len(words) >= 2 and all(word.isalpha() or word.replace('-', '').isalpha() for word in words)
    
    async def handle_unexpected_sticker(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        current_state = await state.get_state()
        
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.increment_error_count(message.from_user.id)
            witty_responses = context_manager.get_witty_responses()["sticker_in_registration"]
            response = random.choice(witty_responses)
        else:
            response = "üòä –°—Ç–∏–∫–µ—Ä –ø—Ä–∏–Ω—è—Ç! –ù–æ —Å–µ–π—á–∞—Å –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ."
        
        await message.answer(response)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø–æ–º–æ—â—å —Å —É—á–µ—Ç–æ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if current_state:
            await self._provide_fsm_help(message, state, current_state)
        else:
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            await message.answer(
                "üòä **–°–ø–∞—Å–∏–±–æ –∑–∞ —Å—Ç–∏–∫–µ—Ä!**\n\n"
                "ü§î –ù–æ —Å–µ–π—á–∞—Å —Å—Ç–∏–∫–µ—Ä—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.\n\n"
                "üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ:",
                parse_mode="Markdown"
            )
            keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    
    async def handle_unexpected_voice(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        current_state = await state.get_state()
        
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.increment_error_count(message.from_user.id)
            witty_responses = context_manager.get_witty_responses()["voice_unexpected"]
            response = random.choice(witty_responses)
        else:
            response = "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ù–æ —Å–µ–π—á–∞—Å –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç."
        
        await message.answer(response)
        
        if current_state:
            await self._provide_fsm_help(message, state, current_state)
        else:
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            await message.answer(
                "üé§ **–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!**\n\n"
                "ü§î –ù–æ —Å–µ–π—á–∞—Å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.\n\n"
                "üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ:",
                parse_mode="Markdown"
            )
            keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    
    async def handle_unexpected_media(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        current_state = await state.get_state()
        
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.increment_error_count(message.from_user.id)
        
        content_type_map = {
            'video': '–≤–∏–¥–µ–æ üé•',
            'audio': '–∞—É–¥–∏–æ üéµ', 
            'animation': 'GIF üé¨',
            'document': '–¥–æ–∫—É–º–µ–Ω—Ç üìÑ'
        }
        
        content_type = None
        for msg_type, display_name in content_type_map.items():
            if hasattr(message, msg_type) and getattr(message, msg_type):
                content_type = display_name
                break
        
        if not content_type:
            content_type = "–º–µ–¥–∏–∞ üìé"
        
        await message.answer(
            f"üìé {content_type} –ø–æ–ª—É—á–µ–Ω! –ù–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–Ω–µ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.\n\n"
            f"üéØ –î–∞–≤–∞–π—Ç–µ —è –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ —Å–µ–π—á–∞—Å –ª—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:"
        )
        
        if current_state:
            await self._provide_fsm_help(message, state, current_state)
        else:
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            await message.answer(
                f"üìé **{content_type} –ø–æ–ª—É—á–µ–Ω!**\n\n"
                f"ü§î –ù–æ —Å–µ–π—á–∞—Å —Ç–∞–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.\n\n"
                "üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ:",
                parse_mode="Markdown"
            )
            keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    
    async def handle_unexpected_photo(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö"""
        current_state = await state.get_state()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–Ω–æ –Ω–µ upload_photo)
        if current_state:
            context_manager = get_context_manager()
            if context_manager:
                await context_manager.increment_error_count(message.from_user.id)
            
            await message.answer(
                "üì∏ –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ! –ù–æ —Å–µ–π—á–∞—Å –æ–Ω–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞.\n\n"
                "üîÑ –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:"
            )
            
            await self._provide_fsm_help(message, state, current_state)
        else:
            # –î–ª—è —Ñ–æ—Ç–æ –≤–Ω–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è - –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            await message.answer(
                "üì∏ **–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ!**\n\n"
                "ü§î –ù–æ —Å–µ–π—á–∞—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.\n\n"
                "üí° **–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:**\n"
                "üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è\n"
                "üìä –£–∑–Ω–∞—Ç—å –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n"
                "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n"
                "üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ:",
                parse_mode="Markdown"
            )
            keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    
    async def handle_unexpected_contact(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö"""
        current_state = await state.get_state()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–Ω–æ –Ω–µ enter_phone - —Ñ–∏–ª—å—Ç—Ä –∏—Å–∫–ª—é—á–∞–µ—Ç)
        
        if current_state:
            context_manager = get_context_manager()
            if context_manager:
                await context_manager.increment_error_count(message.from_user.id)
            
            await message.answer(
                "üì± –°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç! –ù–æ —Å–µ–π—á–∞—Å –æ–Ω –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–º —ç—Ç–∞–ø–µ.\n\n"
                "üß≠ –ü–æ–∑–≤–æ–ª—å—Ç–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤–∞—Å:"
            )
            
            await self._provide_fsm_help(message, state, current_state)
        else:
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            await message.answer(
                "üì± **–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç!**\n\n"
                "ü§î –ù–æ —Å–µ–π—á–∞—Å –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.\n\n"
                "üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ:",
                parse_mode="Markdown"
            )
            keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    
    async def handle_unexpected_location(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        current_state = await state.get_state()
        
        if current_state:
            await message.answer(
                "üó∫Ô∏è –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Å—Ç–æ! –ù–æ –¥–ª—è –Ω–∞—à–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞.\n\n"
                "üéØ –î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É:"
            )
            await self._provide_fsm_help(message, state, current_state)
        else:
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            await message.answer(
                "üó∫Ô∏è **–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!**\n\n"
                "ü§î –ù–æ —Å–µ–π—á–∞—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n\n"
                "üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ:",
                parse_mode="Markdown"
            )
            keyboard = await get_main_menu_keyboard_for_user(message.from_user.id)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    
    async def _handle_confused_user(self, message: types.Message, state: FSMContext):
        """–ü–æ–º–æ—â—å –∑–∞–ø—É—Ç–∞–≤—à–µ–º—É—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        
        context_manager = get_context_manager()
        if context_manager:
            confusion_responses = context_manager.get_witty_responses()["confusion_general"]
            response = random.choice(confusion_responses)
        else:
            response = "ü§î –ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞!"
        
        await message.answer(f"{response}\n\nüöÄ **–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫:**")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        quick_nav = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="quick_nav_main"),
                InlineKeyboardButton(text="üöÄ –ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="quick_nav_register")
            ],
            [
                InlineKeyboardButton(text="üí¨ –í –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="quick_nav_support"),
                InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="quick_nav_help")
            ]
        ])
        
        await message.answer(
            "üéØ **–ö—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏–º—Å—è?**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=quick_nav
        )
    
    def _register_quick_nav_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö inline-–¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""

        @self.router.callback_query(F.data == "quick_nav_main")
        async def quick_nav_main(callback: types.CallbackQuery, state: FSMContext):
            await state.clear()
            keyboard = await get_main_menu_keyboard_for_user(callback.from_user.id)
            await callback.message.edit_text(
                "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
                reply_markup=keyboard
            )
            await callback.answer()

        @self.router.callback_query(F.data == "quick_nav_register")
        async def quick_nav_register(callback: types.CallbackQuery, state: FSMContext):
            from bot.states import RegistrationStates
            await state.set_state(RegistrationStates.enter_name)
            await callback.message.edit_text(
                "üöÄ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞**\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ).\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
            )
            await callback.message.answer(
                "üëÜ –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
                reply_markup=get_name_input_keyboard()
            )
            await callback.answer()

        @self.router.callback_query(F.data == "quick_nav_support")
        async def quick_nav_support(callback: types.CallbackQuery, state: FSMContext):
            await state.clear()
            await callback.message.edit_text(
                "üí¨ **–¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
            )
            await callback.message.answer(
                "–ß–µ–º –º–æ–∂–µ–º –ø–æ–º–æ—á—å?",
                reply_markup=get_support_menu_keyboard()
            )
            await callback.answer()

        @self.router.callback_query(F.data == "quick_nav_cancel")
        async def quick_nav_cancel(callback: types.CallbackQuery, state: FSMContext):
            # –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç /cancel: –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
            await state.clear()
            keyboard = await get_main_menu_keyboard_for_user(callback.from_user.id)
            await callback.message.edit_text(
                "‚ùå **–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\nüè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer()

        @self.router.callback_query(F.data == "quick_nav_help")  # noqa: F841
        async def quick_nav_help(callback: types.CallbackQuery):
            """Handle quick help navigation"""
            help_text = (
                "‚ùì **–ë–´–°–¢–†–ê–Ø –°–ü–†–ê–í–ö–ê**\n\n"
                "üöÄ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è** - –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n"
                "üìã **–ú–æ–π —Å—Ç–∞—Ç—É—Å** - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏\n" 
                "üí¨ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞** - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ\n"
                "üìä **–û —Ä–æ–∑—ã–≥—Ä—ã—à–µ** - –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–∏–∑—ã –∏ —Å—Ä–æ–∫–∏\n\n"
                "üéØ **–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–Ω–æ:**\n"
                "1Ô∏è‚É£ –ü–æ–ª–Ω–æ–µ –∏–º—è (–∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ)\n"
                "2Ô∏è‚É£ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "3Ô∏è‚É£ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\n"
                "4Ô∏è‚É£ –§–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞\n\n"
                "‚ö° **–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                "‚Ä¢ `/start` - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                "‚Ä¢ `/cancel` - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
                "‚Ä¢ `/help` - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"
            )
            
            await callback.message.edit_text(help_text, parse_mode="Markdown")
            await callback.answer()
    
    async def handle_unknown_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        await callback.answer(
            "ü§ñ –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            show_alert=True
        )


def setup_fixed_fallback_handlers(dispatcher) -> FixedSmartFallbackHandler:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    handler = FixedSmartFallbackHandler()
    handler.setup(dispatcher)
    return handler
