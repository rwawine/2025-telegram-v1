"""Common bot commands and informational handlers."""

from aiogram import F, Router, types

from bot.keyboards import get_info_menu_keyboard, get_support_menu_keyboard
from bot.context_manager import get_context_manager, UserContext, UserAction
from bot.messages import smart_messages
from database.repositories import get_participant_status


class CommonHandlers:
    def __init__(self) -> None:
        self.router = Router()
        self._register()

    def setup(self, dispatcher) -> None:
        dispatcher.include_router(self.router)

    def _register(self) -> None:
        # REMOVED: Command("start") - —Ç–µ–ø–µ—Ä—å –≤ global_commands.py
        self.router.message.register(self.help_and_support_handler, F.text.in_(["‚ùì –ü–æ–º–æ—â—å", "üí¨ –ü–æ–º–æ—â—å", "üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]))
        self.router.message.register(self.status_handler, F.text.in_(["üìã –ú–æ–π —Å—Ç–∞—Ç—É—Å", "‚úÖ –ú–æ–π —Å—Ç–∞—Ç—É—Å", "‚è≥ –ú–æ–π —Å—Ç–∞—Ç—É—Å", "‚ùå –ú–æ–π —Å—Ç–∞—Ç—É—Å", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"]))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
        self.router.message.register(self.restart_registration, F.text == "üîÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞")
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û —Ä–æ–∑—ã–≥—Ä—ã—à–µ"
        self.router.message.register(self.show_info_menu, F.text == "üìä –û —Ä–æ–∑—ã–≥—Ä—ã—à–µ")
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–º–æ—â—å
        self.router.message.register(self.handle_results_redirect, F.text == "üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        self.router.callback_query.register(self.handle_info_callback, F.data.startswith("info_"))

    # REMOVED: start method - —Ç–µ–ø–µ—Ä—å –≤ global_commands.py

    async def help_and_support_handler(self, message: types.Message) -> None:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏ –∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ support handler"""
        from bot.messages import smart_messages
        
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.update_context(
                message.from_user.id,
                UserContext.SUPPORT,
                UserAction.BUTTON_CLICK
            )
        
        support_messages = smart_messages.get_support_messages()
        menu_msg = support_messages["menu"]
        
        keyboard = get_support_menu_keyboard()
        await message.answer(
            menu_msg["text"],
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    async def status_handler(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        from bot.keyboards.main_menu import get_status_keyboard
        
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.update_context(
                message.from_user.id,
                UserContext.NAVIGATION,
                UserAction.BUTTON_CLICK
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
        status = await get_participant_status(message.from_user.id)
        
        if status:
            status_text = {
                "pending": "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                "approved": "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞", 
                "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            }.get(status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            
            text = f"‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è: {status_text}\n\n"
            
            if status == "approved":
                text += "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!"
            elif status == "pending":
                text += "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏."
            elif status == "rejected":
                text += "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        else:
            text = "‚ùì –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ.\n\nüöÄ –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é' –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!"
            
        await message.answer(text, reply_markup=get_status_keyboard())

    async def restart_registration(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
        from bot.handlers.registration import RegistrationHandler
        from pathlib import Path
        from services.cache import get_cache
        
        context_manager = get_context_manager()
        if context_manager:
            await context_manager.update_context(
                message.from_user.id,
                UserContext.REGISTRATION,
                UserAction.BUTTON_CLICK
            )
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        registration_handler = RegistrationHandler(
            upload_dir=Path("uploads"),
            cache=get_cache(),
            bot=None  # –ù–µ –Ω—É–∂–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        )
        
        await registration_handler.start_registration(message, None)

    async def handle_results_redirect(self, message: types.Message) -> None:
        """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∫–Ω–æ–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –ø–æ–º–æ—â—å"""
        await message.answer(
            "üîÑ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "üí¨ –ü–æ–º–æ—â—å ‚Üí üìã –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Üí üïê –ö–æ–≥–¥–∞ –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?"
        )
        await self.help_and_support_handler(message)

    async def show_info_menu(self, message: types.Message) -> None:
        text = (
            "üéâ –û –Ω–∞—à–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n\n"
            "‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        )
        await message.answer(text, reply_markup=get_info_menu_keyboard())

    async def handle_info_callback(self, callback: types.CallbackQuery) -> None:
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –û —Ä–æ–∑—ã–≥—Ä—ã—à–µ"
        if callback.data == "info_back":
            text = (
                "üéâ –û –Ω–∞—à–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n\n"
                "‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
            )
            await callback.message.edit_text(text, reply_markup=get_info_menu_keyboard())
            await callback.answer()
            return
        
        mapping = {
            "info_rules": (
                "üóí *–ü—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ*\n\n"
                "‚Üí –í—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å *15 —Å—Ç–∏–∫–µ—Ä–æ–≤*\n"
                "‚Üí –°–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –∏ –ø—Ä–∏–∫–ª–µ–π—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤ —á–∞—Ç-–±–æ—Ç\n"
                "‚Üí –ü–æ–ª—É—á–∏—Ç–µ —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞ –ë–∞–π–∫–∞–ª –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–æ–º–∏–Ω–∞–ª–æ–º 200\\.000\n\n"
                "‚úÖ *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã:*\n\n"
                "–°–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–æ–∫—É–ø–∫–∏ —Å –∫–∞—Ä—Ç–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ú–∞–≥–Ω–æ–ª–∏–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n\n"
                "‚Ä¢ –û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ —É–ª—ã–±–∫–æ–π —Å–æ SberPay –æ—Ç 500 ‚ÇΩ\n"
                "‚Ä¢ –ò–ª–∏ —Å–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–æ–∫—É–ø–∫—É –æ—Ç 1500 ‚ÇΩ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å —Ç–æ–≤–∞—Ä–æ–º –±—Ä–µ–Ω–¥–∞-–ø–∞—Ä—Ç–Ω—ë—Ä–∞)\n\n"
                "–ó–∞ –∫–∞–∂–¥—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–∫—É–ø–∫—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 3D-—Å—Ç–∏–∫–µ—Ä —Å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –ë–∞–π–∫–∞–ª–∞\\.\n\n"
                "‚úèÔ∏è *–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ:*\n\n"
                "–°–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º–∏ –ª–∏—Ñ–ª–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é\\. –ó–∞—Ç–µ–º –≤ —ç—Ç–æ–º –±–æ—Ç–µ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∏–∫–ª–µ–µ–Ω–Ω—ã–º–∏ —Å—Ç–∏–∫–µ—Ä–∞–º–∏\\.\n\n"
                "–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Å–æ–±—Ä–∞–≤—à–∏—Ö –ø–æ–ª–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é\\!\n\n"
                "–í–∞–∂–Ω–æ, —á—Ç–æ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ —É–ª—ã–±–∫–æ–π —Å–æ SberPay\\.\n"
                "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–æ–º–∏–Ω–∞–ª–æ–º 200\\.000 —Ä—É–±–ª–µ–π –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —É –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –±—Ä–µ–Ω–¥–æ–≤ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"
            ),
            "info_prizes": (
                "üèÜ *–ü—Ä–∏–∑ —Ä–æ–∑—ã–≥—Ä—ã—à–∞*\n\n"
                "–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ ‚Äî *–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞ –ë–∞–π–∫–∞–ª* ‚Äî –≤—ã–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ–∫—É–ø–æ–∫ —É–ª—ã–±–∫–æ–π —Å–æ SberPay.\n\n"
                "–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ —É –±—Ä–µ–Ω–¥–æ–≤-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤—ã–¥–∞–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –ø—Ä–∏–∑ ‚Äî *—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–æ–º–∏–Ω–∞–ª–æ–º 200.000 —Ä—É–±–ª–µ–π*\\*\n\n"
                "\\*–í–∞–∂–Ω–æ, —á—Ç–æ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ —É–ª—ã–±–∫–æ–π —Å–æ SberPay\\.\n"
                "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–æ–º–∏–Ω–∞–ª–æ–º 200\\.000 —Ä—É–±–ª–µ–π –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —É –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –±—Ä–µ–Ω–¥–æ–≤ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã\\.\n\n"
                "üèîÔ∏è *–í–∞—à–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å!*"
            ),
            "info_schedule": (
                "üìÖ *–°—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–∫—Ü–∏–∏*\n\n"
                "–ê–∫—Ü–∏—è ¬´–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –ú–æ—Å–∫–≤–µ¬ª –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å *15 –æ–∫—Ç—è–±—Ä—è –ø–æ 15 –¥–µ–∫–∞–±—Ä—è 2025 –≥–æ–¥–∞*."
            ),
            "info_fairness": (
                "‚öñÔ∏è *–ì–∞—Ä–∞–Ω—Ç–∏–∏ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏*\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞, –≤–µ–¥–µ–º —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
            ),
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é "–û —Ä–æ–∑—ã–≥—Ä—ã—à–µ"
        back_button = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="info_back")]
        ])
        
        await callback.message.edit_text(
            mapping.get(callback.data, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."),
            parse_mode="Markdown",
            reply_markup=back_button
        )
        await callback.answer()


def setup_common_handlers(dispatcher) -> CommonHandlers:
    handler = CommonHandlers()
    handler.setup(dispatcher)
    return handler

