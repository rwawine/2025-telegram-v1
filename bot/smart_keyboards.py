"""–£–º–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏."""

from __future__ import annotations

from typing import List, Optional, Dict, Any
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from database.repositories import get_participant_status


class SmartKeyboardBuilder:
    """–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —É–º–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    @staticmethod
    def create_progress_keyboard(
        step: int, 
        total_steps: int,
        main_buttons: List[List[str]],
        back_button: Optional[str] = None,
        help_button: Optional[str] = None,
        special_buttons: Optional[Dict[str, Dict[str, Any]]] = None
    ) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_bar = "üü¢" * step + "‚ö™" * (total_steps - step)
        progress_text = f"üìä –®–∞–≥ {step}/{total_steps}: {progress_bar}"
        
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        for row in main_buttons:
            keyboard_row = []
            for btn in row:
                if special_buttons and btn in special_buttons:
                    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    params = special_buttons[btn]
                    keyboard_row.append(KeyboardButton(text=btn, **params))
                else:
                    # –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                    keyboard_row.append(KeyboardButton(text=btn))
            keyboard.append(keyboard_row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        service_row = []
        if back_button:
            service_row.append(KeyboardButton(text=back_button))
        if help_button:
            service_row.append(KeyboardButton(text=help_button))
        
        if service_row:
            keyboard.append(service_row)
        
        return ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            input_field_placeholder=progress_text
        )
    
    @staticmethod
    def create_contextual_keyboard(
        context: str,
        buttons: List[List[str]],
        hints: Optional[Dict[str, str]] = None
    ) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏"""
        
        context_emojis = {
            "registration": "üöÄ",
            "support": "üí¨",
            "info": "üìä",
            "status": "üìã"
        }
        
        context_hints = {
            "registration": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ",
            "support": "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ",
            "info": "–ò–∑—É—á–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞",
            "status": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ"
        }
        
        emoji = context_emojis.get(context, "üéØ")
        hint = hints.get(context) if hints else context_hints.get(context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        
        keyboard = []
        for row in buttons:
            keyboard.append([KeyboardButton(text=btn) for btn in row])
        
        return ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            input_field_placeholder=f"{emoji} {hint}"
        )
    
    @staticmethod
    def create_smart_inline_keyboard(
        buttons: List[List[Dict[str, str]]],
        style: str = "default"
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç —É–º–Ω—É—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç–∏–ª—è–º–∏"""
        
        style_emojis = {
            "navigation": "üß≠",
            "action": "‚ö°",
            "selection": "üéØ",
            "confirmation": "‚úÖ"
        }
        
        keyboard = []
        for row in buttons:
            keyboard_row = []
            for btn_data in row:
                text = btn_data["text"]
                callback_data = btn_data["callback_data"]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
                if style in style_emojis and not any(emoji in text for emoji in ["üéØ", "üìù", "‚ö°", "üß≠", "‚úÖ", "‚ùå", "üîô"]):
                    text = f"{style_emojis[style]} {text}"
                
                keyboard_row.append(
                    InlineKeyboardButton(text=text, callback_data=callback_data)
                )
            keyboard.append(keyboard_row)
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)


class AdaptiveKeyboards:
    """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∏–∑–º–µ–Ω—è—é—â–∏–µ—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    @staticmethod
    async def get_main_menu_keyboard(telegram_id: int) -> ReplyKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–æ–¥ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_status = await get_participant_status(telegram_id)
        
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if user_status is None:
            # –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            keyboard.extend([
                [KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")],
                [KeyboardButton(text="üìä –û —Ä–æ–∑—ã–≥—Ä—ã—à–µ"), KeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
            ])
        elif user_status == "pending":
            # –ó–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            keyboard.extend([
                [KeyboardButton(text="‚è≥ –ú–æ–π —Å—Ç–∞—Ç—É—Å")],
                [KeyboardButton(text="üìä –û —Ä–æ–∑—ã–≥—Ä—ã—à–µ"), KeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
            ])
        elif user_status == "approved":
            # –û–¥–æ–±—Ä–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
            keyboard.extend([
                [KeyboardButton(text="‚úÖ –ú–æ–π —Å—Ç–∞—Ç—É—Å")],
                [KeyboardButton(text="üìä –û —Ä–æ–∑—ã–≥—Ä—ã—à–µ"), KeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
            ])
        elif user_status == "rejected":
            # –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞
            keyboard.extend([
                [KeyboardButton(text="üîÑ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞")],
                [KeyboardButton(text="üìä –û —Ä–æ–∑—ã–≥—Ä—ã—à–µ"), KeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
            ])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        hints = {
            None: "–ù–∞—á–Ω–∏—Ç–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!",
            "pending": "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å!",
            "approved": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—á–∞—Å—Ç–Ω–∏–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞!",
            "rejected": "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∏ –ø–æ–¥–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ"
        }
        
        return ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            input_field_placeholder=f"üéØ {hints.get(user_status, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ')}"
        )
    
    @staticmethod
    def get_registration_step_keyboard(step: int, step_name: str) -> ReplyKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        
        step_configs = {
            1: {  # –ò–º—è
                "buttons": [],
                "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                "help": "‚ùì –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ—Å—Ç–∏ –∏–º—è?"
            },
            2: {  # –¢–µ–ª–µ—Ñ–æ–Ω
                "buttons": [["üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä"], ["‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"]],
                "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–º–µ–Ω–∏",
                "help": "‚ùì –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–æ–º–µ—Ä–æ–º?",
                "special_buttons": {"üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä": {"request_contact": True}}
            },
            3: {  # –ö–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
                "buttons": [],
                "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
                "help": "‚ùì –ì–¥–µ –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã?"
            },
            4: {  # –§–æ—Ç–æ
                "buttons": [
                    ["üì∑ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ", "üñºÔ∏è –í—ã–±—Ä–∞—Ç—å –∏–∑ –≥–∞–ª–µ—Ä–µ–∏"]
                ],
                "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏",
                "help": None
            }
        }
        
        config = step_configs.get(step, {})
        
        return SmartKeyboardBuilder.create_progress_keyboard(
            step=step,
            total_steps=4,
            main_buttons=config.get("buttons", []),
            back_button=config.get("back"),
            help_button=config.get("help"),
            special_buttons=config.get("special_buttons")
        )
    
    @staticmethod
    def get_support_keyboard_with_quick_actions() -> ReplyKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        keyboard = [
            [KeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")],
            [KeyboardButton(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")], 
            [KeyboardButton(text="üìû –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        
        return ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            input_field_placeholder="üí¨ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É"
        )
    
    @staticmethod
    def get_ticket_creation_keyboard() -> ReplyKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è"""
        keyboard = [
            [KeyboardButton(text="üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ"), KeyboardButton(text="üìÑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")],
            [KeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        
        return ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            input_field_placeholder="‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
        )
    
    @staticmethod 
    def get_smart_categories_keyboard() -> InlineKeyboardMarkup:
        """–£–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏"""
        
        categories = [
            {"text": "üî• –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ç–æ (—á–∞—Å—Ç–∞—è)", "callback_data": "cat_photo"},
            {"text": "üí≥ –í–æ–ø—Ä–æ—Å –ø–æ –∫–∞—Ä—Ç–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", "callback_data": "cat_card"}, 
            {"text": "üì± –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", "callback_data": "cat_tech"},
            {"text": "üìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", "callback_data": "cat_status"},
            {"text": "üèÜ –í–æ–ø—Ä–æ—Å—ã –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ", "callback_data": "cat_lottery"},
            {"text": "‚úèÔ∏è –î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞", "callback_data": "cat_other"}
        ]
        
        return SmartKeyboardBuilder.create_smart_inline_keyboard(
            [[cat] for cat in categories],
            style="selection"
        )
    
    @staticmethod
    def get_confusion_help_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–º–æ—â–∏ –¥–ª—è –∑–∞–ø—É—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        
        help_options = [
            [
                {"text": "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "help_main"},
                {"text": "üöÄ –ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "callback_data": "help_register"}
            ],
            [
                {"text": "üí¨ –í –ø–æ–¥–¥–µ—Ä–∂–∫—É", "callback_data": "help_support"},
                {"text": "üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "callback_data": "help_status"}
            ],
            [
                {"text": "‚ùì –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞", "callback_data": "help_detailed"}
            ]
        ]
        
        return SmartKeyboardBuilder.create_smart_inline_keyboard(
            help_options,
            style="navigation"
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
smart_keyboards = SmartKeyboardBuilder()
adaptive_keyboards = AdaptiveKeyboards()
