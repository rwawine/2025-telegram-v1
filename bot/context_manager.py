"""–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

from __future__ import annotations

import asyncio
from datetime import datetime, timedelta
from typing import Any, Dict, Optional, List
from enum import Enum
from dataclasses import dataclass

from aiogram import types
from aiogram.fsm.context import FSMContext

from database.repositories import get_participant_status
from services.cache import get_cache


class UserContext(Enum):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    REGISTRATION = "registration"
    SUPPORT = "support"
    NAVIGATION = "navigation"
    INFO_BROWSING = "info_browsing"
    IDLE = "idle"
    CONFUSED = "confused"


class UserAction(Enum):
    """–¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    TEXT_INPUT = "text_input"
    PHOTO_UPLOAD = "photo_upload"
    CONTACT_SHARE = "contact_share"
    DOCUMENT_UPLOAD = "document_upload"
    BUTTON_CLICK = "button_click"
    CALLBACK_QUERY = "callback_query"
    STICKER_SEND = "sticker_send"
    VOICE_SEND = "voice_send"
    UNEXPECTED = "unexpected"


@dataclass
class UserSession:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id: int
    current_context: UserContext
    last_action: Optional[UserAction]
    last_message_time: datetime
    consecutive_errors: int
    registration_status: Optional[str]
    breadcrumbs: List[str]  # –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    hints_shown: List[str]  # –ü–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    preferred_style: str = "friendly"  # friendly, professional, witty


class ContextManager:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.sessions: Dict[int, UserSession] = {}
        self.cache = get_cache()
        
    async def get_or_create_session(self, telegram_id: int) -> UserSession:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if telegram_id not in self.sessions:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            registration_status = await get_participant_status(telegram_id)
            
            self.sessions[telegram_id] = UserSession(
                telegram_id=telegram_id,
                current_context=UserContext.IDLE,
                last_action=None,
                last_message_time=datetime.now(),
                consecutive_errors=0,
                registration_status=registration_status,
                breadcrumbs=[],
                hints_shown=[]
            )
        
        return self.sessions[telegram_id]
    
    async def update_context(self, telegram_id: int, context: UserContext, action: UserAction = None):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session = await self.get_or_create_session(telegram_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ breadcrumbs –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
        if session.current_context != context:
            session.breadcrumbs.append(f"{session.current_context.value}‚Üí{context.value}")
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(session.breadcrumbs) > 10:
                session.breadcrumbs = session.breadcrumbs[-10:]
        
        session.current_context = context
        session.last_action = action
        session.last_message_time = datetime.now()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
        if action and action != UserAction.UNEXPECTED:
            session.consecutive_errors = 0
    
    async def detect_user_confusion(self, telegram_id: int, message: types.Message, state: FSMContext) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∑–∞–ø—É—Ç–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        session = await self.get_or_create_session(telegram_id)
        current_state = await state.get_state()
        
        confusion_indicators = 0
        
        # 1. –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥
        if session.consecutive_errors >= 2:
            confusion_indicators += 2
            
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        text = message.text or ""
        if current_state:
            if "enter_name" in current_state and (message.photo or message.contact):
                confusion_indicators += 1
            elif "upload_photo" in current_state and message.text and not any(word in text.lower() for word in ["—Ñ–æ—Ç–æ", "–≥–∞–ª–µ—Ä", "–∫–∞–º–µ—Ä"]):
                confusion_indicators += 1
        
        # 3. –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –¥–µ–π—Å—Ç–≤–∏–µ
        if len(session.breadcrumbs) >= 3:
            recent_actions = session.breadcrumbs[-3:]
            if len(set(recent_actions)) == 1:  # –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
                confusion_indicators += 1
        
        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        generic_phrases = ["—á—Ç–æ", "–∫–∞–∫", "–ø–æ–º–æ–≥–∏", "–Ω–µ –ø–æ–Ω–∏–º–∞—é", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "???", "—Ö–µ–ª–ø", "help"]
        if any(phrase in text.lower() for phrase in generic_phrases):
            confusion_indicators += 1
        
        return confusion_indicators >= 2
    
    async def get_smart_suggestion(self, telegram_id: int, message: types.Message, state: FSMContext) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —É–º–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session = await self.get_or_create_session(telegram_id)
        current_state = await state.get_state()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        if current_state:
            if "enter_name" in current_state:
                return {
                    "context": "registration_name",
                    "message": "ü§î –ö–∞–∂–µ—Ç—Å—è, –≤—ã –∑–∞—Å—Ç—Ä—è–ª–∏ –Ω–∞ –≤–≤–æ–¥–µ –∏–º–µ–Ω–∏!\n\n‚ú® –ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: **–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á**",
                    "quick_actions": ["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è?"],
                    "next_step_hint": "–ü–æ—Å–ª–µ –∏–º–µ–Ω–∏ –º—ã –ø–æ–ø—Ä–æ—Å–∏–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±"
                }
            elif "enter_phone" in current_state:
                return {
                    "context": "registration_phone", 
                    "message": "üì± –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n\nüéØ –î–≤–∞ –ø—Ä–æ—Å—Ç—ã—Ö —Å–ø–æ—Å–æ–±–∞:\n‚Ä¢ –ù–∞–∂–∞—Ç—å **üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä**\n‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ **+79001234567**",
                    "quick_actions": ["üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", "‚¨ÖÔ∏è –ö –∏–º–µ–Ω–∏", "üè† –í –º–µ–Ω—é"],
                    "next_step_hint": "–î–∞–ª–µ–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ üí≥"
                }
            elif "upload_photo" in current_state:
                return {
                    "context": "registration_photo",
                    "message": "üì∏ –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - —Ñ–æ—Ç–æ –ª–∏—Ñ–ª–µ—Ç–∞!\n\nüé® **–õ–∏—Ñ–ª–µ—Ç** - —ç—Ç–æ —Ä–µ–∫–ª–∞–º–Ω–∞—è –ª–∏—Å—Ç–æ–≤–∫–∞ –∏–ª–∏ –±–∞–Ω–Ω–µ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n‚úÖ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ **üì∑ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ** –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n‚Ä¢ **üñºÔ∏è –í—ã–±—Ä–∞—Ç—å –∏–∑ –≥–∞–ª–µ—Ä–µ–∏**",
                    "quick_actions": ["üì∑ –ö–∞–º–µ—Ä–∞", "üñºÔ∏è –ì–∞–ª–µ—Ä–µ—è", "‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –ª–∏—Ñ–ª–µ—Ç?"],
                    "next_step_hint": "–ü–æ—Å–ª–µ —Ñ–æ—Ç–æ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! üéâ"
                }
            elif "entering_message" in current_state:
                return {
                    "context": "support_message",
                    "message": "üí¨ –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\nüìù **–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É** - —á–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –ø–æ–º–æ–∂–µ–º\n\nüìé –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏",
                    "quick_actions": ["üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", "üìÑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª", "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"],
                    "next_step_hint": "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ ‚è∞"
                }
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
        if session.registration_status is None:
            return {
                "context": "new_user",
                "message": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüéØ –ù–∞—á–Ω–∏—Ç–µ —Å **üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é** –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n\nüîç –ò–ª–∏ –∏–∑—É—á–∏—Ç–µ **üìä –û —Ä–æ–∑—ã–≥—Ä—ã—à–µ** —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ",
                "quick_actions": ["üöÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "üìä –û —Ä–æ–∑—ã–≥—Ä—ã—à–µ", "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"],
                "next_step_hint": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 2-3 –º–∏–Ω—É—Ç—ã! ‚ö°"
            }
        
        return None
    
    async def increment_error_count(self, telegram_id: int):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        session = await self.get_or_create_session(telegram_id)
        session.consecutive_errors += 1
    
    async def add_hint_shown(self, telegram_id: int, hint_id: str):
        """–û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É"""
        session = await self.get_or_create_session(telegram_id)
        if hint_id not in session.hints_shown:
            session.hints_shown.append(hint_id)
    
    async def should_show_hint(self, telegram_id: int, hint_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É"""
        session = await self.get_or_create_session(telegram_id)
        return hint_id not in session.hints_shown
    
    def get_witty_responses(self) -> Dict[str, List[str]]:
        """–û—Å—Ç—Ä–æ—É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π"""
        return {
            "sticker_in_registration": [
                "üòÑ –û—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∏–∫–µ—Ä! –ù–æ —Å–µ–π—á–∞—Å –º–Ω–µ –Ω—É–∂–Ω–æ –≤–∞—à–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º - —Å—Ç–∏–∫–µ—Ä—ã —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —á–∏—Ç–∞—Ç—å ü§ñ",
                "üé® –ö—Ä–∞—Å–∏–≤–æ! –ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —á–µ—Ä–µ–∑ –∏–º—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
                "üòä –°—Ç–∏–∫–µ—Ä –ø—Ä–∏–Ω—è—Ç —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é! –ù–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —Å—Ç–∞—Ä–æ–º–æ–¥–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–º—è"
            ],
            "voice_unexpected": [
                "üéôÔ∏è –ì–æ–ª–æ—Å –æ—Ç–ª–∏—á–Ω—ã–π! –ù–æ —è –ª—É—á—à–µ —á–∏—Ç–∞—é, —á–µ–º —Å–ª—É—à–∞—é - –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç–æ–º",
                "üîä –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∑–≤—É—á–∏—Ç! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–∏ —É—à–∏ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ",
                "üéµ –ú—É–∑—ã–∫–∞ –¥–ª—è –º–æ–∏—Ö —Å—Ö–µ–º! –ù–æ –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏–º—Å—è –Ω–∞ –ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ"
            ],
            "confusion_general": [
                "ü§î –ö–∞–∂–µ—Ç—Å—è, –º—ã –Ω–µ–º–Ω–æ–≥–æ –∑–∞–ø—É—Ç–∞–ª–∏—Å—å! –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ - —Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç —Å –∫–∞–∂–¥—ã–º",
                "üß≠ –ü–æ—Ö–æ–∂–µ, –º—ã —Å–≤–µ—Ä–Ω—É–ª–∏ –Ω–µ —Ç—É–¥–∞. –î–∞–≤–∞–π—Ç–µ —è –ø–æ–∫–∞–∂—É –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–æ—Ä–æ–≥—É!",
                "üîÑ –ù–µ–±–æ–ª—å—à–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–º–∏–Ω–∫–∞? –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –°–µ–π—á–∞—Å –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º"
            ],
            "wrong_content_type": [
                "üìé –í–∏–∂—É, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {content_type}! –ù–æ —Å–µ–π—á–∞—Å –ª—É—á—à–µ –ø–æ–¥–æ–π–¥–µ—Ç {expected_type}",
                "üéØ {content_type} –ø–æ–ª—É—á–µ–Ω, –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞ –Ω—É–∂–µ–Ω {expected_type}. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?",
                "üîÑ {content_type} - —Ö–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞! –ù–æ –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º {expected_type}"
            ]
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
context_manager = None

def init_context_manager():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞"""
    global context_manager
    context_manager = ContextManager()
    return context_manager
