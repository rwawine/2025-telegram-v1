"""Centralized error handling for bot handlers."""

from __future__ import annotations

from functools import wraps
from typing import Callable, Any

from aiogram import types
from aiogram.fsm.context import FSMContext

from core import get_logger

logger = get_logger(__name__)


def handle_bot_errors(
    error_message: str = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
    log_context: bool = True
):
    """Decorator –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö –±–æ—Ç–∞.
    
    Args:
        error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        log_context: –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        
    Usage:
        @handle_bot_errors("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–º—è")
        async def enter_name(self, message, state):
            # ... –ª–æ–≥–∏–∫–∞
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(self, message_or_callback: Any, *args, **kwargs):
            try:
                return await func(self, message_or_callback, *args, **kwargs)
            except Exception as e:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
                if isinstance(message_or_callback, types.Message):
                    event = message_or_callback
                    user_id = event.from_user.id
                    chat_id = event.chat.id
                elif isinstance(message_or_callback, types.CallbackQuery):
                    event = message_or_callback.message
                    user_id = message_or_callback.from_user.id
                    chat_id = message_or_callback.message.chat.id
                else:
                    event = None
                    user_id = None
                    chat_id = None
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                log_extra = {}
                if log_context:
                    log_extra = {
                        "handler": func.__name__,
                        "user_id": user_id,
                        "chat_id": chat_id,
                    }
                
                logger.error(
                    f"Error in {func.__name__}: {e}",
                    exc_info=True,
                    extra=log_extra
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if event:
                    try:
                        await event.answer(
                            f"‚ùå {error_message}\n\n"
                            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
                            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                            parse_mode="Markdown"
                        )
                    except Exception as send_error:
                        logger.error(f"Failed to send error message: {send_error}")
                
        return wrapper
    return decorator


async def handle_validation_error(
    message: types.Message,
    field_name: str,
    expected_format: str,
    example: str,
    keyboard: Any = None
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
    
    Args:
        message: Telegram message
        field_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –∫–∞—Ä—Ç–∞)
        expected_format: –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        example: –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
    """
    await message.answer(
        f"‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {field_name}**\n\n"
        f"üìê –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_format}\n"
        f"‚úÖ –ü—Ä–∏–º–µ—Ä: {example}\n\n"
        f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


async def handle_rate_limit_error(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è rate limit."""
    await message.answer(
        "‚è±Ô∏è **–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤**\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
        "üí° –ú—ã –∑–∞—â–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏.",
        parse_mode="Markdown"
    )


async def handle_database_error(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    await message.answer(
        "üíæ **–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö**\n\n"
        "–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n\n"
        "üí° –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
        parse_mode="Markdown"
    )


class ErrorContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö."""
    
    def __init__(self):
        self.errors = []
        self.warnings = []
    
    def add_error(self, error: str, context: dict = None):
        """–î–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É."""
        self.errors.append({
            "message": error,
            "context": context or {}
        })
    
    def add_warning(self, warning: str, context: dict = None):
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ."""
        self.warnings.append({
            "message": warning,
            "context": context or {}
        })
    
    def has_errors(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫."""
        return len(self.errors) > 0
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
        self.errors.clear()
        self.warnings.clear()

