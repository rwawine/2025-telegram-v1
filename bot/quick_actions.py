"""–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (Quick Actions) –¥–ª—è –±–æ—Ç–∞."""

from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from dataclasses import dataclass
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton


@dataclass
class QuickAction:
    """–ë—ã—Å—Ç—Ä–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."""
    id: str
    title: str
    icon: str
    callback_data: str
    description: str
    is_frequent: bool = False


class QuickActionsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    ACTIONS = {
        "check_status": QuickAction(
            id="check_status",
            title="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
            icon="‚úÖ",
            callback_data="quick_check_status",
            description="–ë—ã—Å—Ç—Ä–æ —É–∑–Ω–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏",
            is_frequent=True
        ),
        "create_ticket": QuickAction(
            id="create_ticket",
            title="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            icon="üí¨",
            callback_data="quick_create_ticket",
            description="–°–æ–∑–¥–∞–π—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            is_frequent=True
        ),
        "view_history": QuickAction(
            id="view_history",
            title="–ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏—è",
            icon="üìú",
            callback_data="quick_view_history",
            description="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫",
            is_frequent=False
        ),
        "resume_registration": QuickAction(
            id="resume_registration",
            title="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            icon="‚ñ∂Ô∏è",
            callback_data="quick_resume_registration",
            description="–ó–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            is_frequent=True
        ),
        "view_prizes": QuickAction(
            id="view_prizes",
            title="–ü—Ä–∏–∑—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞",
            icon="üèÜ",
            callback_data="quick_view_prizes",
            description="–£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å",
            is_frequent=False
        ),
        "faq": QuickAction(
            id="faq",
            title="–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
            icon="‚ùì",
            callback_data="quick_faq",
            description="–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
            is_frequent=True
        ),
    }
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."""
        # –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_id: [(action_id, timestamp), ...]}
        self.user_action_history: Dict[int, List[Tuple[str, datetime]]] = {}
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {user_id: [action_ids]}
        self.contextual_suggestions: Dict[int, List[str]] = {}
    
    def record_action(self, user_id: int, action_id: str) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."""
        if user_id not in self.user_action_history:
            self.user_action_history[user_id] = []
        
        self.user_action_history[user_id].append((action_id, datetime.now()))
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 50 –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        if len(self.user_action_history[user_id]) > 50:
            self.user_action_history[user_id] = self.user_action_history[user_id][-50:]
    
    def get_frequent_actions(self, user_id: int, limit: int = 3) -> List[QuickAction]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if user_id not in self.user_action_history:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            return [
                self.ACTIONS["check_status"],
                self.ACTIONS["create_ticket"],
                self.ACTIONS["faq"]
            ]
        
        # –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        cutoff_date = datetime.now() - timedelta(days=30)
        recent_actions = [
            action_id for action_id, timestamp in self.user_action_history[user_id]
            if timestamp > cutoff_date
        ]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
        action_counts = {}
        for action_id in recent_actions:
            action_counts[action_id] = action_counts.get(action_id, 0) + 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
        sorted_actions = sorted(action_counts.items(), key=lambda x: x[1], reverse=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø –¥–µ–π—Å—Ç–≤–∏–π
        result = []
        for action_id, _ in sorted_actions[:limit]:
            if action_id in self.ACTIONS:
                result.append(self.ACTIONS[action_id])
        
        # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
        if len(result) < limit:
            default_actions = [
                self.ACTIONS["check_status"],
                self.ACTIONS["create_ticket"],
                self.ACTIONS["faq"]
            ]
            for action in default_actions:
                if action not in result and len(result) < limit:
                    result.append(action)
        
        return result
    
    def get_contextual_actions(
        self,
        user_id: int,
        user_status: Optional[str] = None,
        has_incomplete_registration: bool = False
    ) -> List[QuickAction]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        suggestions = []
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        if has_incomplete_registration:
            suggestions.append(self.ACTIONS["resume_registration"])
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
        if user_status == "pending":
            suggestions.append(self.ACTIONS["check_status"])
        elif user_status == "rejected":
            suggestions.append(self.ACTIONS["create_ticket"])
        elif user_status == "approved":
            suggestions.append(self.ACTIONS["view_prizes"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º FAQ –µ—Å–ª–∏ –µ—â–µ –º–∞–ª–æ –¥–µ–π—Å—Ç–≤–∏–π
        if len(suggestions) < 2:
            suggestions.append(self.ACTIONS["faq"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
        if user_id in self.user_action_history and len(self.user_action_history[user_id]) > 5:
            if self.ACTIONS["view_history"] not in suggestions:
                suggestions.append(self.ACTIONS["view_history"])
        
        return suggestions[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è
    
    def get_quick_actions_keyboard(
        self,
        user_id: int,
        user_status: Optional[str] = None,
        has_incomplete_registration: bool = False,
        include_back: bool = True
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏."""
        buttons = []
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∏ —á–∞—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        contextual = self.get_contextual_actions(user_id, user_status, has_incomplete_registration)
        frequent = self.get_frequent_actions(user_id)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        all_actions = contextual.copy()
        for action in frequent:
            if action not in all_actions:
                all_actions.append(action)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 6 –¥–µ–π—Å—Ç–≤–∏–π
        all_actions = all_actions[:6]
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ (–ø–æ 2 –≤ —Ä—è–¥)
        for i in range(0, len(all_actions), 2):
            row = []
            for j in range(2):
                if i + j < len(all_actions):
                    action = all_actions[i + j]
                    row.append(InlineKeyboardButton(
                        text=f"{action.icon} {action.title}",
                        callback_data=action.callback_data
                    ))
            buttons.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        if include_back:
            buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def get_quick_actions_reply_keyboard(
        self,
        user_id: int,
        user_status: Optional[str] = None,
        has_incomplete_registration: bool = False
    ) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏."""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-3 –¥–µ–π—Å—Ç–≤–∏—è
        contextual = self.get_contextual_actions(user_id, user_status, has_incomplete_registration)
        
        buttons = []
        for action in contextual:
            buttons.append([KeyboardButton(text=f"{action.icon} {action.title}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        buttons.append([KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
        
        return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    
    def get_action_description(self, action_id: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è."""
        if action_id in self.ACTIONS:
            action = self.ACTIONS[action_id]
            return f"{action.icon} *{action.title}*\n\n{action.description}"
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    
    def suggest_next_actions(self, user_id: int, current_action: str) -> List[QuickAction]:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ."""
        # –õ–æ–≥–∏–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        next_actions_map = {
            "check_status": ["create_ticket", "view_history"],
            "create_ticket": ["check_status", "faq"],
            "view_history": ["check_status", "view_prizes"],
            "resume_registration": ["check_status", "faq"],
            "view_prizes": ["check_status", "faq"],
            "faq": ["create_ticket", "check_status"],
        }
        
        suggested_ids = next_actions_map.get(current_action, ["check_status", "faq"])
        return [self.ACTIONS[aid] for aid in suggested_ids if aid in self.ACTIONS]


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
quick_actions_manager = QuickActionsManager()

